{
	"info": {
		"_postman_id": "0489f25d-6fd2-464e-ba5a-4485f43b094c",
		"name": "xs2a-connector-tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1 Consent",
			"item": [
				{
					"name": "5 global consent embedded 1 scaMethod",
					"item": [
						{
							"name": "1 create consent global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8c1d607-7531-41d1-9024-9c650fcddcd7",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Start authorisation link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var expl = _links.startAuthorisationWithPsuAuthentication;",
											"    var impl = _links.startAuthorisation;",
											"  ",
											"    if (expl === undefined && impl === undefined) {",
											"       pm.expect().fail();",
											"    }",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"pm.globals.set(\"startAuthorisation\", jsonData._links.startAuthorisation);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1857f2f5-e3ec-45ba-aee9-7cbf00bd4132",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"allPsd2\": \"allAccounts\",\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": true,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2019-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 Start the authorisation process for a consent global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1957eb90-4bd3-4751-9256-ba7e705265d9",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.href.split('/').pop();",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Start authorisation link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
											"});",
											"",
											"pm.test(\"Select scaStatus \", () => {",
											"    pm.expect(jsonData).to.have.property('scaStatus');",
											"    const scaStatus = jsonData.scaStatus;",
											"    pm.expect(scaStatus).to.eql('started');",
											"});",
											"",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9a3b9e5d-5391-4c0e-b91c-beab5542e7e3",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID",
										"value": "{{PSU-Corporate-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID-Type",
										"value": "{{PSU-Corporate-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{PSU-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "3 Update PSU Data for consent global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec7a30b5-de25-4aac-8f24-39cf6c64b9df",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is scaMethodSelected', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
											"});",
											"",
											"pm.test(\"Select authoriseTransaction method link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('authoriseTransaction');",
											"});",
											"",
											"pm.test(\"Select chosenScaMethod exist\", () => {",
											"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
											"    const chosenScaMethod = jsonData.chosenScaMethod;",
											"    ",
											"   /* pm.expect(chosenScaMethod).to.have.property('authenticationType');",
											"    pm.expect(chosenScaMethod.authenticationType).to.eql('SMS_OTP');*/",
											"    ",
											"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
											"   // pm.expect(chosenScaMethod.authenticationMethodId).to.eql('bKLq119_SJomg8FlC_Y4Gs');",
											"});",
											"",
											"pm.test(\"Challenge data exist\", () => {",
											"    pm.expect(jsonData).to.have.property('challengeData');",
											"   /* const challengeData = jsonData.challengeData;",
											"    ",
											"    pm.expect(challengeData).to.have.property('data');",
											"    pm.expect(challengeData).to.have.property('imageLink');",
											"    pm.expect(challengeData).to.have.property('otpMaxLength');",
											"    pm.expect(challengeData).to.have.property('additionalInformation');*/",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID",
										"value": "{{PSU-Corporate-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID-Type",
										"value": "{{PSU-Corporate-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{PSU-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "4 Update PSU Data for consents finalization global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e30b6d6-16d6-4b78-a782-0c9caef3ea1a",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is finalised', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
											"});",
											"",
											"pm.test(\"Select scaStatus link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('scaStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID",
										"value": "{{PSU-Corporate-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID-Type",
										"value": "{{PSU-Corporate-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{PSU-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scaAuthenticationData\": \"{{tan}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "5 Get Consent Request global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f78fd945-b5d3-4986-96e8-0738bd1f7e27",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "6 Read the SCA status of the consent authorisation global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a83e55e2-cbf1-4ee0-a09c-d93e63f13091",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
							},
							"response": []
						},
						{
							"name": "7 Consent status request global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28ab1dd5-91be-4d5c-8787-d15d44c4b931",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test consent status\", () => {",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"status"
									]
								},
								"description": "Read the status of an account information consent resource."
							},
							"response": []
						},
						{
							"name": "8 Delete Consent global",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "177d50a2-e604-4706-89fc-6bc871ccd3b1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "The TPP can delete an account information consent object if needed."
							},
							"response": []
						},
						{
							"name": "9. Get transactions should fail",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:8089/v1/accounts/aaaaaaaaaa/transactions/?bookingStatus=both",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8089",
									"path": [
										"v1",
										"accounts",
										"aaaaaaaaaa",
										"transactions",
										""
									],
									"query": [
										{
											"key": "bookingStatus",
											"value": "both"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "4 dedicated consent embedded 1 scaMethod",
					"item": [
						{
							"name": "1 create consent dedicated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1e1877d-5e93-4751-b6a1-779dbfb0e0a0",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Start authorisation link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var expl = _links.startAuthorisationWithPsuAuthentication;",
											"    var impl = _links.startAuthorisation;",
											"  ",
											"    if (expl === undefined && impl === undefined) {",
											"       pm.expect().fail();",
											"    }",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"pm.globals.set(\"startAuthorisation\", jsonData._links.startAuthorisation);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dc68bfd4-4b87-45a8-8a23-0308d8941622",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n        \"iban\": \"DE80760700240271232400\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n        \"iban\": \"DE80760700240271232400\"\n      }\n    ],\n    \"transactions\": [\n      {\n       \"currency\": \"EUR\",\n        \"iban\": \"DE80760700240271232400\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": true,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2019-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 Start the authorisation process for a consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1957eb90-4bd3-4751-9256-ba7e705265d9",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.href.split('/').pop();",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Start authorisation link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
											"});",
											"",
											"pm.test(\"Select scaStatus \", () => {",
											"    pm.expect(jsonData).to.have.property('scaStatus');",
											"    const scaStatus = jsonData.scaStatus;",
											"    pm.expect(scaStatus).to.eql('started');",
											"});",
											"",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9a3b9e5d-5391-4c0e-b91c-beab5542e7e3",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID",
										"value": "{{PSU-Corporate-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID-Type",
										"value": "{{PSU-Corporate-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{PSU-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "3 Update PSU Data for consents",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec7a30b5-de25-4aac-8f24-39cf6c64b9df",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is scaMethodSelected', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
											"});",
											"",
											"pm.test(\"Select authoriseTransaction method link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('authoriseTransaction');",
											"});",
											"",
											"pm.test(\"Select chosenScaMethod exist\", () => {",
											"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
											"    const chosenScaMethod = jsonData.chosenScaMethod;",
											"    ",
											"   /* pm.expect(chosenScaMethod).to.have.property('authenticationType');",
											"    pm.expect(chosenScaMethod.authenticationType).to.eql('SMS_OTP');*/",
											"    ",
											"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
											"    //pm.expect(chosenScaMethod.authenticationMethodId).to.eql('bKLq119_SJomg8FlC_Y4Gs');",
											"});",
											"",
											"pm.test(\"Challenge data exist\", () => {",
											"    pm.expect(jsonData).to.have.property('challengeData');",
											"  /*  const challengeData = jsonData.challengeData;",
											"    ",
											"    pm.expect(challengeData).to.have.property('data');",
											"    pm.expect(challengeData).to.have.property('imageLink');",
											"    pm.expect(challengeData).to.have.property('otpMaxLength');",
											"    pm.expect(challengeData).to.have.property('additionalInformation');*/",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID",
										"value": "{{PSU-Corporate-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID-Type",
										"value": "{{PSU-Corporate-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{PSU-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "4 Update PSU Data for consents finalization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e30b6d6-16d6-4b78-a782-0c9caef3ea1a",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is finalised', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
											"});",
											"",
											"pm.test(\"Select scaStatus link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('scaStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID",
										"value": "{{PSU-Corporate-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID-Type",
										"value": "{{PSU-Corporate-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{PSU-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scaAuthenticationData\": \"{{tan}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "5 Get Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f78fd945-b5d3-4986-96e8-0738bd1f7e27",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "6 Read the SCA status of the consent authorisation.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a83e55e2-cbf1-4ee0-a09c-d93e63f13091",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
							},
							"response": []
						},
						{
							"name": "7 Consent status request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28ab1dd5-91be-4d5c-8787-d15d44c4b931",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test consent status\", () => {",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"status"
									]
								},
								"description": "Read the status of an account information consent resource."
							},
							"response": []
						},
						{
							"name": "8 Delete Consent dedicated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "177d50a2-e604-4706-89fc-6bc871ccd3b1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "The TPP can delete an account information consent object if needed."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "3 bank offered consent embedded 1 scaMethod -> start in redirect!",
					"item": [
						{
							"name": "1 create consent bank offered",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce918dd0-6631-4518-b6f5-fdc4f308740a",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Start authorisation link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var expl = _links.startAuthorisationWithPsuAuthentication;",
											"    var impl = _links.startAuthorisation;",
											"  ",
											"   /* if (expl === undefined && impl === undefined) {",
											"       pm.expect().fail();",
											"    }*/",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"pm.globals.set(\"startAuthorisation\", jsonData._links.startAuthorisation);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b421d8cf-914b-4f0f-906d-198ed1045657",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "TPP-REDIRECT-PREFERRED",
										"value": "true",
										"type": "text"
									},
									{
										"key": "TPP-Redirect-URI",
										"value": "{{tpp-redirect-uri}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": true,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2019-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 Start the authorisation process for a consent bank offered",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1957eb90-4bd3-4751-9256-ba7e705265d9",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.href.split('/').pop();",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Start authorisation link exists\", () => {",
											"    pm.expect(jsonData).to.have.",
											"    property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
											"});",
											"",
											"pm.test(\"Select scaStatus \", () => {",
											"    pm.expect(jsonData).to.have.property('scaStatus');",
											"    const scaStatus = jsonData.scaStatus;",
											"    pm.expect(scaStatus).to.eql('started');",
											"});",
											"",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9a3b9e5d-5391-4c0e-b91c-beab5542e7e3",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID",
										"value": "{{PSU-Corporate-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID-Type",
										"value": "{{PSU-Corporate-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{PSU-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "3 Update PSU Data for consent bank offered",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec7a30b5-de25-4aac-8f24-39cf6c64b9df",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is scaMethodSelected', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
											"});",
											"",
											"pm.test(\"Select authoriseTransaction method link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('authoriseTransaction');",
											"});",
											"",
											"pm.test(\"Select chosenScaMethod exist\", () => {",
											"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
											"    const chosenScaMethod = jsonData.chosenScaMethod;",
											"    ",
											"    /*pm.expect(chosenScaMethod).to.have.property('authenticationType');",
											"    pm.expect(chosenScaMethod.authenticationType).to.eql('SMS_OTP');*/",
											"    ",
											"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
											"    //pm.expect(chosenScaMethod.authenticationMethodId).to.eql('bKLq119_SJomg8FlC_Y4Gs');",
											"});",
											"",
											"pm.test(\"Challenge data exist\", () => {",
											"    pm.expect(jsonData).to.have.property('challengeData');",
											"   /* const challengeData = jsonData.challengeData;",
											"    ",
											"    pm.expect(challengeData).to.have.property('data');",
											"    pm.expect(challengeData).to.have.property('imageLink');",
											"    pm.expect(challengeData).to.have.property('otpMaxLength');",
											"    pm.expect(challengeData).to.have.property('additionalInformation');*/",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID",
										"value": "{{PSU-Corporate-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID-Type",
										"value": "{{PSU-Corporate-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{PSU-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "4 Update PSU Data for consents finalization bank offered",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e30b6d6-16d6-4b78-a782-0c9caef3ea1a",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is finalised', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
											"});",
											"",
											"pm.test(\"Select scaStatus link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('scaStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID",
										"value": "{{PSU-Corporate-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID-Type",
										"value": "{{PSU-Corporate-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{PSU-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scaAuthenticationData\": \"{{tan}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "5 Get Consent Request bank offered",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f78fd945-b5d3-4986-96e8-0738bd1f7e27",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "6 Read the SCA status of the consent authorisation bank offered",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a83e55e2-cbf1-4ee0-a09c-d93e63f13091",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
							},
							"response": []
						},
						{
							"name": "7 Consent status request bank offered",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28ab1dd5-91be-4d5c-8787-d15d44c4b931",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test consent status\", () => {",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"status"
									]
								},
								"description": "Read the status of an account information consent resource."
							},
							"response": []
						},
						{
							"name": "8 Delete Consent bank offered",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "177d50a2-e604-4706-89fc-6bc871ccd3b1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "The TPP can delete an account information consent object if needed."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "2 available accounts consent embedded many scaMethods",
					"item": [
						{
							"name": "1 create consent available accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "477839d1-4900-45b9-b805-5229ca49a4f0",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Start authorisation link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var expl = _links.startAuthorisationWithPsuAuthentication;",
											"    var impl = _links.startAuthorisation;",
											"  ",
											"    if (expl === undefined && impl === undefined) {",
											"       pm.expect().fail();",
											"    }",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"pm.globals.set(\"startAuthorisation\", jsonData._links.startAuthorisation);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "82f7b8f9-228b-4fd5-bf3d-6022e8089620",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_multiple}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"access\": {    \n\t\t\"accounts\": [],\n\t\t\"balances\": [],\n\t\t\"availableAccounts\": \"allAccounts\",\n\t\t\"transactions\": []\n\t\t},\n\t\t\"combinedServiceIndicator\": true,\n\t\t\"frequencyPerDay\": 10,\n\t\t\"recurringIndicator\": true,\n\t\t\"validUntil\": \"2019-10-10\"\n\t\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 Start the authorisation process for a consent av",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1957eb90-4bd3-4751-9256-ba7e705265d9",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.href.split('/').pop();",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Start authorisation link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
											"});",
											"",
											"pm.test(\"Select scaStatus \", () => {",
											"    pm.expect(jsonData).to.have.property('scaStatus');",
											"    const scaStatus = jsonData.scaStatus;",
											"    pm.expect(scaStatus).to.eql('started');",
											"});",
											"",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9a3b9e5d-5391-4c0e-b91c-beab5542e7e3",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID",
										"value": "{{PSU-Corporate-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID-Type",
										"value": "{{PSU-Corporate-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_multiple}}"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{PSU-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "3 Update PSU Data for consent av",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec7a30b5-de25-4aac-8f24-39cf6c64b9df",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is psuAuthenticated', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
											"});",
											"",
											"pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
											"});",
											"",
											"pm.test(\"scaMethods exist\", () => {",
											"    pm.expect(jsonData).to.have.property('scaMethods');",
											"    const scaMethods = jsonData.scaMethods;",
											"    ",
											"    pm.expect(scaMethods.length).to.eql(2);",
											"    ",
											"   /* pm.expect(scaMethods[0]).to.have.property('authenticationType');",
											"    pm.expect(scaMethods[0].authenticationType).to.eql('SMS_OTP');*/",
											"",
											"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
											"    //pm.expect(scaMethods[0].authenticationMethodId).to.eql('TezHZNjKQyMqC2UUroYt1c');",
											"    ",
											"    pm.globals.set(\"authentication_method_id\",scaMethods[0].authenticationMethodId)",
											"    ",
											"   /* pm.expect(scaMethods[1]).to.have.property('authenticationType');",
											"    pm.expect(scaMethods[1].authenticationType).to.eql('PUSH_OTP');*/",
											"    ",
											"    pm.expect(scaMethods[1]).to.have.property('authenticationMethodId');",
											"    //pm.expect(scaMethods[1].authenticationMethodId).to.eql('8fwn7I9PSZonLKWQ4wsyK8');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID",
										"value": "{{PSU-Corporate-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID-Type",
										"value": "{{PSU-Corporate-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_multiple}}"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{PSU-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "4 Update PSU Data for consent av choose scaMethod",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec7a30b5-de25-4aac-8f24-39cf6c64b9df",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is scaMethodSelected', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
											"});",
											"",
											"pm.test(\"Select authoriseTransaction method link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('authoriseTransaction');",
											"});",
											"",
											"pm.test(\"Select chosenScaMethod exist\", () => {",
											"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
											"    const chosenScaMethod = jsonData.chosenScaMethod;",
											"    ",
											"   /* pm.expect(chosenScaMethod).to.have.property('authenticationType');",
											"    pm.expect(chosenScaMethod.authenticationType).to.eql('SMS_OTP');*/",
											"    ",
											"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
											"    pm.expect(chosenScaMethod.authenticationMethodId).to.eql(pm.globals.get(\"authentication_method_id\"));",
											"});",
											"",
											"pm.test(\"Challenge data exist\", () => {",
											"    pm.expect(jsonData).to.have.property('challengeData');",
											"   /* const challengeData = jsonData.challengeData;",
											"    ",
											"    pm.expect(challengeData).to.have.property('data');",
											"    pm.expect(challengeData).to.have.property('imageLink');",
											"    pm.expect(challengeData).to.have.property('otpMaxLength');",
											"    pm.expect(challengeData).to.have.property('additionalInformation');*/",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID",
										"value": "{{PSU-Corporate-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID-Type",
										"value": "{{PSU-Corporate-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_multiple}}"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{PSU-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"authenticationMethodId\": \"{{authentication_method_id}}\"        \n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "5 Update PSU Data for consents finalization av",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e30b6d6-16d6-4b78-a782-0c9caef3ea1a",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is finalised', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
											"});",
											"",
											"pm.test(\"Select scaStatus link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('scaStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID",
										"value": "{{PSU-Corporate-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID-Type",
										"value": "{{PSU-Corporate-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_multiple}}"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{PSU-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scaAuthenticationData\": \"{{tan}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "6 Get Consent Request av",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f78fd945-b5d3-4986-96e8-0738bd1f7e27",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "7 Read the SCA status of the consent authorisation av",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a83e55e2-cbf1-4ee0-a09c-d93e63f13091",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
							},
							"response": []
						},
						{
							"name": "8 Consent status request av",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28ab1dd5-91be-4d5c-8787-d15d44c4b931",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test consent status\", () => {",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"status"
									]
								},
								"description": "Read the status of an account information consent resource."
							},
							"response": []
						},
						{
							"name": "9 Delete Consent av",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "177d50a2-e604-4706-89fc-6bc871ccd3b1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "The TPP can delete an account information consent object if needed."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "1 available accounts consent embedded 1 scaMethod",
					"item": [
						{
							"name": "1 create consent available accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb4d1542-5906-4e9b-947c-e9aaa96c5405",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Start authorisation link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var expl = _links.startAuthorisationWithPsuAuthentication;",
											"    var impl = _links.startAuthorisation;",
											"  ",
											"    if (expl === undefined && impl === undefined) {",
											"       pm.expect().fail();",
											"    }",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"pm.globals.set(\"startAuthorisation\", jsonData._links.startAuthorisation);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "96c44aea-da41-4794-9de1-11099bbc9400",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"access\": {    \n\t\t\"accounts\": [],\n\t\t\"balances\": [],\n\t\t\"availableAccounts\": \"allAccounts\",\n\t\t\"transactions\": []\n\t\t},\n\t\t\"combinedServiceIndicator\": true,\n\t\t\"frequencyPerDay\": 10,\n\t\t\"recurringIndicator\": true,\n\t\t\"validUntil\": \"2019-10-10\"\n\t\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 Start the authorisation process for a consent av",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1957eb90-4bd3-4751-9256-ba7e705265d9",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.href.split('/').pop();",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Start authorisation link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
											"});",
											"",
											"pm.test(\"Select scaStatus \", () => {",
											"    pm.expect(jsonData).to.have.property('scaStatus');",
											"    const scaStatus = jsonData.scaStatus;",
											"    pm.expect(scaStatus).to.eql('started');",
											"});",
											"",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9a3b9e5d-5391-4c0e-b91c-beab5542e7e3",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID",
										"value": "{{PSU-Corporate-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID-Type",
										"value": "{{PSU-Corporate-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{PSU-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "3 Update PSU Data for consent av",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec7a30b5-de25-4aac-8f24-39cf6c64b9df",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is scaMethodSelected', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
											"});",
											"",
											"pm.test(\"Select authoriseTransaction method link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('authoriseTransaction');",
											"});",
											"",
											"pm.test(\"Select chosenScaMethod exist\", () => {",
											"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
											"    const chosenScaMethod = jsonData.chosenScaMethod;",
											"    ",
											"    //pm.expect(chosenScaMethod).to.have.property('authenticationType');",
											"    //pm.expect(chosenScaMethod.authenticationType).to.eql('SMS_OTP');",
											"    ",
											"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
											"    //pm.expect(chosenScaMethod.authenticationMethodId).to.eql('bKLq119_SJomg8FlC_Y4Gs');",
											"});",
											"",
											"pm.test(\"Challenge data exist\", () => {",
											"    pm.expect(jsonData).to.have.property('challengeData');",
											"    /*const challengeData = jsonData.challengeData;",
											"    ",
											"    pm.expect(challengeData).to.have.property('data');",
											"    pm.expect(challengeData).to.have.property('imageLink');",
											"    pm.expect(challengeData).to.have.property('otpMaxLength');",
											"    pm.expect(challengeData).to.have.property('additionalInformation');*/",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID",
										"value": "{{PSU-Corporate-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID-Type",
										"value": "{{PSU-Corporate-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{PSU-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "4 Update PSU Data for consents finalization av",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e30b6d6-16d6-4b78-a782-0c9caef3ea1a",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is finalised', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
											"});",
											"",
											"pm.test(\"Select scaStatus link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('scaStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID",
										"value": "{{PSU-Corporate-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID-Type",
										"value": "{{PSU-Corporate-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "PSU-ID-Type",
										"value": "{{PSU-ID-Type}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scaAuthenticationData\": \"{{tan}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "5 Get Consent Request av",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f78fd945-b5d3-4986-96e8-0738bd1f7e27",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "6 Read the SCA status of the consent authorisation av",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a83e55e2-cbf1-4ee0-a09c-d93e63f13091",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
							},
							"response": []
						},
						{
							"name": "7 Consent status request av",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28ab1dd5-91be-4d5c-8787-d15d44c4b931",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Test consent status\", () => {",
											"    pm.expect(jsonData).to.have.property('consentStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"status"
									]
								},
								"description": "Read the status of an account information consent resource."
							},
							"response": []
						},
						{
							"name": "8 Delete Consent av",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "177d50a2-e604-4706-89fc-6bc871ccd3b1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Digest",
										"value": "{{Digest}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept",
										"value": "{{PSU-Accept}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Charset",
										"value": "{{PSU-Accept-Charset}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Encoding",
										"value": "{{PSU-Accept-Encoding}}",
										"disabled": true
									},
									{
										"key": "PSU-Accept-Language",
										"value": "{{PSU-Accept-Language}}",
										"disabled": true
									},
									{
										"key": "PSU-Device-ID",
										"value": "{{PSU-Device-ID}}",
										"disabled": true
									},
									{
										"key": "PSU-Geo-Location",
										"value": "{{PSU-Geo-Location}}",
										"disabled": true
									},
									{
										"key": "PSU-Http-Method",
										"value": "{{PSU-Http-Method}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{PSU-IP-Address}}",
										"disabled": true
									},
									{
										"key": "PSU-IP-Port",
										"value": "{{PSU-IP-Port}}",
										"disabled": true
									},
									{
										"key": "PSU-User-Agent",
										"value": "{{PSU-User-Agent}}",
										"disabled": true
									},
									{
										"key": "Signature",
										"value": "{{Signature}}",
										"disabled": true
									},
									{
										"key": "TPP-Signature-Certificate",
										"value": "{{TPP-Signature-Certificate}}",
										"disabled": true
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "The TPP can delete an account information consent object if needed."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "3 PIS",
			"item": [
				{
					"name": "PIS SCA Embedded",
					"item": [
						{
							"name": "1 NONE_SCA",
							"item": [
								{
									"name": "1. Payment initiation request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96d686a3-5f56-4cd2-b043-50dc3bf36d7c",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b4cbc456-5fd9-4fd5-a8cc-c601b228c824",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"DE69760700240340283600\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"20.00\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"DE15500105172295759744\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"city\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postalCode\": \"90543\",\n      \"street\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/payments/sepa-credit-transfers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"payments",
												"sepa-credit-transfers"
											]
										},
										"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
									},
									"response": []
								},
								{
									"name": "2. Start the authorisation process for a payment initiation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d56d427f-c556-496e-a0ad-693046fd39f6",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.href.split('/').pop();",
													"pm.globals.set(\"authorisation_id\", authorisationId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4e1898ce-dc16-4c98-a814-d70ce1571ddf",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "3. Update  authorisation - password stage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4af10dcc-1200-4c9a-9d87-1c20587dc4d5",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"psuData\":{\n   \"password\":\"{{psu_id_password}}\"\n}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "2 SINGLE_SCA",
							"item": [
								{
									"name": "1. Payment initiation request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96d686a3-5f56-4cd2-b043-50dc3bf36d7c",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b4cbc456-5fd9-4fd5-a8cc-c601b228c824",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"D1\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"DE80760700240271232400\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"50.00\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"DE15500105172295759744\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"city\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postalCode\": \"90543\",\n      \"street\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}"
											]
										},
										"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
									},
									"response": []
								},
								{
									"name": "2. Start the authorisation process for a payment initiation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d56d427f-c556-496e-a0ad-693046fd39f6",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.href.split('/').pop();",
													"pm.globals.set(\"authorisation_id\", authorisationId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4e1898ce-dc16-4c98-a814-d70ce1571ddf",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "3. Update  authorisation - password stage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06adf1b3-cff1-4ff3-a698-6295757d8474",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is scaMethodSelected', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
													"});",
													"",
													"pm.test(\"Select authoriseTransaction method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('authoriseTransaction');",
													"});",
													"",
													"pm.test(\"Select other links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"});",
													"",
													"pm.test(\"Select chosenScaMethod exist\", () => {",
													"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
													"    const chosenScaMethod = jsonData.chosenScaMethod;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
													"   ",
													"    pm.expect(chosenScaMethod).to.have.property('name');",
													"});",
													"",
													"pm.test(\"Challenge data exist\", () => {",
													"    pm.expect(jsonData).to.have.property('challengeData');",
													"    /*const challengeData = jsonData.challengeData;",
													"    ",
													"    pm.expect(challengeData).to.have.property('data');",
													"    pm.expect(challengeData).to.have.property('imageLink');",
													"    pm.expect(challengeData).to.have.property('otpMaxLength');",
													"    pm.expect(challengeData).to.have.property('additionalInformation');*/",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "4. Update  authorisation -  apply code stage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b157720-806f-4e07-b2a3-e85ca73f5a80",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"scaAuthenticationData\": \"{{tan}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "3 MULTIPLE_SCA",
							"item": [
								{
									"name": "1. Payment initiation request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96d686a3-5f56-4cd2-b043-50dc3bf36d7c",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b4cbc456-5fd9-4fd5-a8cc-c601b228c824",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"DE38760700240320465700\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"100.00\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"DE38760700240320465700\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"city\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postalCode\": \"90543\",\n      \"street\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}"
											]
										},
										"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
									},
									"response": []
								},
								{
									"name": "2. Start the authorisation process for a payment initiation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d56d427f-c556-496e-a0ad-693046fd39f6",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.href.split('/').pop();",
													"pm.globals.set(\"authorisation_id\", authorisationId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4e1898ce-dc16-4c98-a814-d70ce1571ddf",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "3. Update  authorisation - password stage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06adf1b3-cff1-4ff3-a698-6295757d8474",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is psuAuthenticated', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
													"});",
													"",
													"pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
													"});",
													"",
													"pm.test(\"scaMethods exist\", () => {",
													"    pm.expect(jsonData).to.have.property('scaMethods');",
													"    const scaMethods = jsonData.scaMethods;",
													"    ",
													"    pm.expect(scaMethods.length).to.eql(2);",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
													"    ",
													"    pm.expect(scaMethods[1]).to.have.property('authenticationMethodId');",
													"});",
													"",
													"pm.globals.set(\"authentication_method_id\", jsonData.scaMethods[0].authenticationMethodId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "4. Update  authorisation -  choose sca method selected stage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7bd97a4f-1665-4830-a5e2-e12c3c615240",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is scaMethodSelected', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"authenticationMethodId\": \"{{authentication_method_id}}\"        \n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "5. Update  authorisation -  apply code stage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7bd97a4f-1665-4830-a5e2-e12c3c615240",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"scaAuthenticationData\": \"{{tan}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f921bc3c-20e9-4646-ba28-7bb4b3123bf4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d985ad29-4a73-4564-a335-5d42c9e3c5e4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Payment Initiation",
					"item": [
						{
							"name": "1 Single Payment embedded 0 scaMethods",
							"item": [
								{
									"name": "1 Payment initiation request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f7611098-dd39-46aa-bdfa-e2280fb9dab2",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Transcation status is RCVD\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
													"});",
													"",
													"pm.test(\"Start authorisation link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    var expl = _links.startAuthorisationWithPsuAuthentication;",
													"    var impl = _links.startAuthorisation;",
													"  ",
													"    if (expl === undefined && impl === undefined) {",
													"       pm.expect().fail();",
													"    }",
													"});",
													"",
													"pm.test(\"Select other links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});",
													"",
													"pm.test(\"Payment Id exists\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"});",
													"",
													"pm.test(\"Transaction Fee Indicator exists\", () => {",
													"    pm.expect(jsonData).to.have.property('transactionFeeIndicator');",
													"});",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													"pm.globals.set(\"startAuthorisation\", jsonData._links.startAuthorisation);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2691de1f-ad62-453d-94bc-a4c3d121f9fb",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Consent-ID",
												"value": "{{Consent-ID}}",
												"disabled": true
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID",
												"value": "{{PSU-Corporate-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID-Type",
												"value": "{{PSU-Corporate-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "PSU-ID-Type",
												"value": "{{PSU-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "{{TPP-Explicit-Authorisation-Preferred}}",
												"disabled": true
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"value": "{{TPP-Nok-Redirect-URI}}",
												"disabled": true
											},
											{
												"key": "TPP-Redirect-Preferred",
												"value": "{{TPP-Redirect-Preferred}}",
												"disabled": true
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "{{TPP-Redirect-URI}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"DE69760700240340283600\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"20.00\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"DE15500105172295759744\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"city\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postalCode\": \"90543\",\n      \"street\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}"
											]
										},
										"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
									},
									"response": []
								},
								{
									"name": "2 Start the authorisation process for a payment initiation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9b76bd79-643e-4dac-9c0d-60dab7120135",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "83f45a10-10ef-4c2b-b9f1-3e29d0ae53fa",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.href.split('/').pop();",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('started');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID",
												"value": "{{PSU-Corporate-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID-Type",
												"value": "{{PSU-Corporate-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "PSU-ID-Type",
												"value": "{{PSU-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "3 Get Payment Initiation Authorisation Sub-Resources Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24a05f20-8df4-406f-9638-7694ffe5979c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Read a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources. "
									},
									"response": []
								},
								{
									"name": "4 Update PSU data for payment initiation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8ee040e-1fd9-415f-9d19-bad3df14d8a4",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Select scaStatus link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});",
													"",
													"pm.test(\"Select other links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID",
												"value": "{{PSU-Corporate-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID-Type",
												"value": "{{PSU-Corporate-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "PSU-ID-Type",
												"value": "{{PSU-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "5 Read the SCA Status of the payment authorisation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec7ce7b6-3c7d-4f8e-8f05-fea52fac37e3",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method returns the SCA status of a payment initiation's authorisation sub-resource. "
									},
									"response": []
								},
								{
									"name": "6 Get Payment Information",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a30ec669-f747-467d-a73c-06e31f79f35d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Mandated fields exist\", () => {",
													"    pm.expect(jsonData).to.have.property('debtorAccount');",
													"    pm.expect(jsonData).to.have.property('instructedAmount');",
													"    pm.expect(jsonData).to.have.property('creditorAccount');",
													"    pm.expect(jsonData).to.have.property('creditorName');",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/xml, multipart/form-data"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}"
											]
										},
										"description": "Returns the content of a payment object"
									},
									"response": []
								},
								{
									"name": "7 Payment initiation status request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5130ce0a-c88d-42f8-ad5f-34e86e3f09aa",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Test transaction status\", () => {",
													"    pm.expect(jsonData).to.have.property('transactionStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/xml"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"status"
											]
										},
										"description": "Check the transaction status of a payment initiation."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "2 Single Payment embedded 1 scaMethods",
							"item": [
								{
									"name": "1 Payment initiation request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f7611098-dd39-46aa-bdfa-e2280fb9dab2",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Transcation status is RCVD\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
													"});",
													"",
													"pm.test(\"Start authorisation link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    var expl = _links.startAuthorisationWithPsuAuthentication;",
													"    var impl = _links.startAuthorisation;",
													"  ",
													"    if (expl === undefined && impl === undefined) {",
													"       pm.expect().fail();",
													"    }",
													"});",
													"",
													"pm.test(\"Select other links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});",
													"",
													"pm.test(\"Payment Id exists\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"});",
													"",
													"pm.test(\"Transaction Fee Indicator exists\", () => {",
													"    pm.expect(jsonData).to.have.property('transactionFeeIndicator');",
													"});",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													"pm.globals.set(\"startAuthorisation\", jsonData._links.startAuthorisation);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2691de1f-ad62-453d-94bc-a4c3d121f9fb",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Consent-ID",
												"value": "{{Consent-ID}}",
												"disabled": true
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID",
												"value": "{{PSU-Corporate-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID-Type",
												"value": "{{PSU-Corporate-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "PSU-ID-Type",
												"value": "{{PSU-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "{{TPP-Explicit-Authorisation-Preferred}}",
												"disabled": true
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"value": "{{TPP-Nok-Redirect-URI}}",
												"disabled": true
											},
											{
												"key": "TPP-Redirect-Preferred",
												"value": "{{TPP-Redirect-Preferred}}",
												"disabled": true
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "{{TPP-Redirect-URI}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"D1\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"DE80760700240271232400\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"50.00\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"DE15500105172295759744\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"city\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postalCode\": \"90543\",\n      \"street\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}"
											]
										},
										"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
									},
									"response": []
								},
								{
									"name": "2 Start the authorisation process for a payment initiation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9b76bd79-643e-4dac-9c0d-60dab7120135",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "83f45a10-10ef-4c2b-b9f1-3e29d0ae53fa",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.href.split('/').pop();",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('started');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID",
												"value": "{{PSU-Corporate-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID-Type",
												"value": "{{PSU-Corporate-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "PSU-ID-Type",
												"value": "{{PSU-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "3 Update PSU data for payment initiation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8ee040e-1fd9-415f-9d19-bad3df14d8a4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is scaMethodSelected', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
													"});",
													"",
													"pm.test(\"Select authoriseTransaction method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('authoriseTransaction');",
													"});",
													"",
													"pm.test(\"Select other links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"});",
													"",
													"pm.test(\"Select chosenScaMethod exist\", () => {",
													"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
													"    const chosenScaMethod = jsonData.chosenScaMethod;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
													"   ",
													"    pm.expect(chosenScaMethod).to.have.property('name');",
													"});",
													"",
													"pm.test(\"Challenge data exist\", () => {",
													"    pm.expect(jsonData).to.have.property('challengeData');",
													"    /*const challengeData = jsonData.challengeData;",
													"    ",
													"    pm.expect(challengeData).to.have.property('data');",
													"    pm.expect(challengeData).to.have.property('imageLink');",
													"    pm.expect(challengeData).to.have.property('otpMaxLength');",
													"    pm.expect(challengeData).to.have.property('additionalInformation');*/",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID",
												"value": "{{PSU-Corporate-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID-Type",
												"value": "{{PSU-Corporate-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "PSU-ID-Type",
												"value": "{{PSU-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "5 Get Payment Initiation Authorisation Sub-Resources Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef4667ac-3dac-4708-9349-51c833ff2ad2",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Read a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources. "
									},
									"response": []
								},
								{
									"name": "4 Update PSU data for payment initiation finalized",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d693df74-3b1a-40b9-a82f-f65b91a356d5",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Select scaStatus link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});",
													"",
													"pm.test(\"Select other links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID",
												"value": "{{PSU-Corporate-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID-Type",
												"value": "{{PSU-Corporate-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "PSU-ID-Type",
												"value": "{{PSU-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scaAuthenticationData\": \"{{tan}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "6 Read the SCA Status of the payment authorisation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec7ce7b6-3c7d-4f8e-8f05-fea52fac37e3",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method returns the SCA status of a payment initiation's authorisation sub-resource. "
									},
									"response": []
								},
								{
									"name": "7 Get Payment Information",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a30ec669-f747-467d-a73c-06e31f79f35d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Mandated fields exist\", () => {",
													"    pm.expect(jsonData).to.have.property('debtorAccount');",
													"    pm.expect(jsonData).to.have.property('instructedAmount');",
													"    pm.expect(jsonData).to.have.property('creditorAccount');",
													"    pm.expect(jsonData).to.have.property('creditorName');",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/xml, multipart/form-data"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}"
											]
										},
										"description": "Returns the content of a payment object"
									},
									"response": []
								},
								{
									"name": "8 Payment initiation status request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5130ce0a-c88d-42f8-ad5f-34e86e3f09aa",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Test transaction status\", () => {",
													"    pm.expect(jsonData).to.have.property('transactionStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/xml"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"status"
											]
										},
										"description": "Check the transaction status of a payment initiation."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "3 Single Payment embedded many scaMethods",
							"item": [
								{
									"name": "1 Payment initiation request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f7611098-dd39-46aa-bdfa-e2280fb9dab2",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Transcation status is RCVD\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
													"});",
													"",
													"pm.test(\"Start authorisation link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    var expl = _links.startAuthorisationWithPsuAuthentication;",
													"    var impl = _links.startAuthorisation;",
													"  ",
													"    if (expl === undefined && impl === undefined) {",
													"       pm.expect().fail();",
													"    }",
													"});",
													"",
													"pm.test(\"Select other links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});",
													"",
													"pm.test(\"Payment Id exists\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"});",
													"",
													"pm.test(\"Transaction Fee Indicator exists\", () => {",
													"    pm.expect(jsonData).to.have.property('transactionFeeIndicator');",
													"});",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													"pm.globals.set(\"startAuthorisation\", jsonData._links.startAuthorisation);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2691de1f-ad62-453d-94bc-a4c3d121f9fb",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Consent-ID",
												"value": "{{Consent-ID}}",
												"disabled": true
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID",
												"value": "{{PSU-Corporate-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID-Type",
												"value": "{{PSU-Corporate-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "PSU-ID-Type",
												"value": "{{PSU-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "{{TPP-Explicit-Authorisation-Preferred}}",
												"disabled": true
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"value": "{{TPP-Nok-Redirect-URI}}",
												"disabled": true
											},
											{
												"key": "TPP-Redirect-Preferred",
												"value": "{{TPP-Redirect-Preferred}}",
												"disabled": true
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "{{TPP-Redirect-URI}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"DE38760700240320465700\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"100.00\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"DE38760700240320465700\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"city\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postalCode\": \"90543\",\n      \"street\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}"
											]
										},
										"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
									},
									"response": []
								},
								{
									"name": "2 Start the authorisation process for a payment initiation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9b76bd79-643e-4dac-9c0d-60dab7120135",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "83f45a10-10ef-4c2b-b9f1-3e29d0ae53fa",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.href.split('/').pop();",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('started');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID",
												"value": "{{PSU-Corporate-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID-Type",
												"value": "{{PSU-Corporate-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "PSU-ID-Type",
												"value": "{{PSU-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "3 Update PSU data for payment initiation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8ee040e-1fd9-415f-9d19-bad3df14d8a4",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is psuAuthenticated', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
													"});",
													"",
													"pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
													"});",
													"",
													"pm.test(\"scaMethods exist\", () => {",
													"    pm.expect(jsonData).to.have.property('scaMethods');",
													"    const scaMethods = jsonData.scaMethods;",
													"    ",
													"    pm.expect(scaMethods.length).to.eql(2);",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
													"    ",
													"    pm.expect(scaMethods[1]).to.have.property('authenticationMethodId');",
													"});",
													"",
													"pm.globals.set(\"authentication_method_id\", jsonData.scaMethods[0].authenticationMethodId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID",
												"value": "{{PSU-Corporate-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID-Type",
												"value": "{{PSU-Corporate-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "PSU-ID-Type",
												"value": "{{PSU-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "4 Update PSU data for payment initiation chose scaMethod",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06e976dc-e44c-4b1c-bb72-abdf8230058c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is scaMethodSelected', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
													"});",
													"",
													"pm.test(\"Select authoriseTransaction method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('authoriseTransaction');",
													"});",
													"",
													"pm.test(\"Select other links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"});",
													"",
													"pm.test(\"Select chosenScaMethod exist\", () => {",
													"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
													"    const chosenScaMethod = jsonData.chosenScaMethod;",
													"    ",
													"   /* pm.expect(chosenScaMethod).to.have.property('authenticationType');",
													"    pm.expect(chosenScaMethod.authenticationType).to.eql('SMS_OTP');*/",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
													"    pm.expect(chosenScaMethod.authenticationMethodId).to.eql(pm.globals.get(\"authentication_method_id\"));",
													"});",
													"",
													"pm.test(\"Challenge data exist\", () => {",
													"    pm.expect(jsonData).to.have.property('challengeData');",
													"   /* const challengeData = jsonData.challengeData;",
													"    ",
													"    pm.expect(challengeData).to.have.property('data');",
													"    pm.expect(challengeData).to.have.property('imageLink');",
													"    pm.expect(challengeData).to.have.property('otpMaxLength');",
													"    pm.expect(challengeData).to.have.property('additionalInformation');*/",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID",
												"value": "{{PSU-Corporate-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID-Type",
												"value": "{{PSU-Corporate-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "PSU-ID-Type",
												"value": "{{PSU-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"authenticationMethodId\": \"{{authentication_method_id}}\"        \n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "6 Get Payment Initiation Authorisation Sub-Resources Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3e03308-7fd2-47cd-96bb-9d187a805961",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Read a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources. "
									},
									"response": []
								},
								{
									"name": "5 Update PSU data for payment initiation finalized",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d693df74-3b1a-40b9-a82f-f65b91a356d5",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Select scaStatus link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});",
													"",
													"pm.test(\"Select other links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID",
												"value": "{{PSU-Corporate-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID-Type",
												"value": "{{PSU-Corporate-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "PSU-ID-Type",
												"value": "{{PSU-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scaAuthenticationData\": \"{{tan}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "7 Read the SCA Status of the payment authorisation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec7ce7b6-3c7d-4f8e-8f05-fea52fac37e3",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method returns the SCA status of a payment initiation's authorisation sub-resource. "
									},
									"response": []
								},
								{
									"name": "8 Get Payment Information",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a30ec669-f747-467d-a73c-06e31f79f35d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Mandated fields exist\", () => {",
													"    pm.expect(jsonData).to.have.property('debtorAccount');",
													"    pm.expect(jsonData).to.have.property('instructedAmount');",
													"    pm.expect(jsonData).to.have.property('creditorAccount');",
													"    pm.expect(jsonData).to.have.property('creditorName');",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/xml, multipart/form-data"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}"
											]
										},
										"description": "Returns the content of a payment object"
									},
									"response": []
								},
								{
									"name": "9 Payment initiation status request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5130ce0a-c88d-42f8-ad5f-34e86e3f09aa",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Test transaction status\", () => {",
													"    pm.expect(jsonData).to.have.property('transactionStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/xml"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"status"
											]
										},
										"description": "Check the transaction status of a payment initiation."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "4 Bulk Payment embedded 0 scaMethods",
							"item": [
								{
									"name": "1 Payment initiation request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f7611098-dd39-46aa-bdfa-e2280fb9dab2",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Transcation status is RCVD\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
													"});",
													"",
													"pm.test(\"Start authorisation link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    var expl = _links.startAuthorisationWithPsuAuthentication;",
													"    var impl = _links.startAuthorisation;",
													"  ",
													"    if (expl === undefined && impl === undefined) {",
													"       pm.expect().fail();",
													"    }",
													"});",
													"",
													"pm.test(\"Select other links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"});",
													"",
													"pm.test(\"Payment Id exists\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"});",
													"",
													"pm.test(\"Transaction Fee Indicator exists\", () => {",
													"    pm.expect(jsonData).to.have.property('transactionFeeIndicator');",
													"});",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													"pm.globals.set(\"startAuthorisation\", jsonData._links.startAuthorisation);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2691de1f-ad62-453d-94bc-a4c3d121f9fb",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Consent-ID",
												"value": "{{Consent-ID}}",
												"disabled": true
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID",
												"value": "{{PSU-Corporate-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID-Type",
												"value": "{{PSU-Corporate-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "PSU-ID-Type",
												"value": "{{PSU-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"value": "{{TPP-Nok-Redirect-URI}}",
												"disabled": true
											},
											{
												"key": "TPP-Redirect-Preferred",
												"value": "{{TPP-Redirect-Preferred}}",
												"disabled": true
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "{{TPP-Redirect-URI}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n      \"batchBookingPreferred\": \"false\",\n      \"requestedExecutionDate\": \"2019-12-12\",\n      \"debtorAccount\": {\n        \"currency\": \"EUR\",\n        \"iban\": \"DE69760700240340283600\"\n      },\n      \"payments\": [\n        {\n          \"endToEndIdentification\": \"WBG-123456789\",\n          \"instructedAmount\": {\n            \"amount\": \"520.00\",\n            \"currency\": \"EUR\"\n          },\n          \"creditorAccount\": {\n            \"currency\": \"EUR\",\n            \"iban\": \"DE15500105172295759744\"\n          },\n          \"creditorAgent\": \"AAAADEBBXXX\",\n          \"creditorName\": \"WBG\",\n          \"creditorAddress\": {\n            \"buildingNumber\": \"56\",\n            \"city\": \"Nürnberg\",\n            \"country\": \"DE\",\n            \"postalCode\": \"90543\",\n            \"street\": \"WBG Straße\"\n          },\n          \"remittanceInformationUnstructured\": \"Ref. Number WBG-1234\"\n        },\n        {\n          \"endToEndIdentification\": \"RI-234567890\",\n          \"instructedAmount\": {\n            \"amount\": \"71.07\",\n            \"currency\": \"EUR\"\n          },\n          \"creditorAccount\": {\n            \"currency\": \"EUR\",\n            \"iban\": \"DE03500105172351985719\"\n          },\n          \"creditorAgent\": \"AAAADEBBXXX\",\n          \"creditorName\": \"Grünstrom\",\n          \"creditorAddress\": {\n            \"buildingNumber\": \"74\",\n            \"city\": \"Dresden\",\n            \"country\": \"DE\",\n            \"postalCode\": \"01067\",\n            \"street\": \"Kaisergasse\"\n          },\n          \"remittanceInformationUnstructured\": \"Ref. Number GRUENSTROM-2444\"\n        }\n      ]\n    }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/bulk-payments/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"bulk-payments",
												"{{payment_product}}"
											]
										},
										"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
									},
									"response": []
								},
								{
									"name": "2 Start the authorisation process for a payment initiation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "03a3f951-eaac-41e7-a662-c6995915c558",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.href.split('/').pop();",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('started');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "96de5eb9-2378-49ba-a554-3a96214d907c",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID",
												"value": "{{PSU-Corporate-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID-Type",
												"value": "{{PSU-Corporate-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "PSU-ID-Type",
												"value": "{{PSU-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/bulk-payments/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"bulk-payments",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "3 Update PSU data for payment initiation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "feb42b03-62b8-4861-b059-c54b2680fb84",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Select scaStatus link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});",
													"",
													"pm.test(\"Select other links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID",
												"value": "{{PSU-Corporate-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID-Type",
												"value": "{{PSU-Corporate-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "PSU-ID-Type",
												"value": "{{PSU-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/bulk-payments/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"bulk-payments",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "4 Get Payment Initiation Authorisation Sub-Resources Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24a05f20-8df4-406f-9638-7694ffe5979c",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/bulk-payments/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"bulk-payments",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Read a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources. "
									},
									"response": []
								},
								{
									"name": "5 Read the SCA Status of the payment authorisation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec7ce7b6-3c7d-4f8e-8f05-fea52fac37e3",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/bulk-payments/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"bulk-payments",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method returns the SCA status of a payment initiation's authorisation sub-resource. "
									},
									"response": []
								},
								{
									"name": "6 Get Payment Information",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a30ec669-f747-467d-a73c-06e31f79f35d",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Mandated fields exist\", () => {",
													"    if (jsonData.payments !== undefined && jsonData.payments.length > 0) {",
													"        jsonData.payments.forEach((entry) => {",
													"            pm.expect(entry).to.have.property('debtorAccount');",
													"            pm.expect(entry).to.have.property('instructedAmount');",
													"            pm.expect(entry).to.have.property('creditorAccount');",
													"            pm.expect(entry).to.have.property('creditorName');",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/xml, multipart/form-data"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/bulk-payments/{{payment_product}}/{{payment_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"bulk-payments",
												"{{payment_product}}",
												"{{payment_id}}"
											]
										},
										"description": "Returns the content of a payment object"
									},
									"response": []
								},
								{
									"name": "7 Payment initiation status request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5130ce0a-c88d-42f8-ad5f-34e86e3f09aa",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Test transaction status\", () => {",
													"    pm.expect(jsonData).to.have.property('transactionStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/xml"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/bulk-payments/{{payment_product}}/{{payment_id}}/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"bulk-payments",
												"{{payment_product}}",
												"{{payment_id}}",
												"status"
											]
										},
										"description": "Check the transaction status of a payment initiation."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "2 AIS",
			"item": [
				{
					"name": "AIS SCA Embedded",
					"item": [
						{
							"name": "1 Explicit",
							"item": [
								{
									"name": "None SCA method available",
									"item": [
										{
											"name": "1. Creates AIS consent",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6f709a09-78fc-40ce-8274-dc29bbcd560e",
														"exec": [
															"pm.globals.unset(\"consent_id\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "27c858ba-9ceb-426a-8e5d-438f019c0598",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Consent status is received\", () => {",
															"    pm.expect(jsonData.consentStatus).to.eql('received');",
															"});",
															"",
															"pm.globals.set(\"consent_id\", jsonData.consentId);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "x-request-id",
														"value": "{{x_request_id}}"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_none}}"
													},
													{
														"key": "TPP-Explicit-Authorisation-Preferred",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n        \"iban\": \"DE69760700240340283600\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n        \"iban\": \"DE69760700240340283600\"\n      }\n    ],\n    \"transactions\": [\n      {\n       \"currency\": \"EUR\",\n        \"iban\": \"DE69760700240340283600\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": true,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2019-10-10\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents"
													]
												},
												"description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
											},
											"response": []
										},
										{
											"name": "2. Start the authorisation process for a consent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "898a97c1-12fd-4166-82b5-9a8f4fc1106c",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Sca status is started\", () => {",
															"    pm.expect(jsonData.scaStatus).to.eql('started');",
															"});",
															"",
															"// splits string link by '/' to array and gets the last element - authorisationId",
															"// e.g. \"http://localhost:8080/v1/consents/d917f39f-6308-4f81-9b51-bfbd8bc934c6/authorisations/554fda7d-bc70-44da-8670-15e299f817a6\"",
															"      // needs to get 554fda7d-bc70-44da-8670-15e299f817a6 value",
															"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.href.split('/').pop();",
															"",
															"pm.globals.set(\"authorisation_id\", authorisationId);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "befc2b29-5dab-4f51-b077-032638f06ac0",
														"exec": [
															"pm.globals.unset(\"authorisation_id\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_none}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process of a consent. The message might in addition transmit authentication and authorisation related data. his method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the consent. The ASPSP might make the usage of this access method unnecessary, since the related authorisation resource will be automatically created by the ASPSP after the submission of the consent data with the first POST consents call. The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource. This applies in the following scenarios: * The ASPSP has indicated with an ‘startAuthorisation’ hyperlink in the preceeding Payment Initiation Response that an explicit start of the authorisation process is needed by the TPP. The ‘startAuthorisation’ hyperlink can transport more information about data which needs to be uploaded by using the extended forms. * 'startAuthorisationWithPsuIdentfication’, * ‘startAuthorisationWithPsuAuthentication’ * ‘startAuthorisationWithAuthentciationMethodSelection’ * The related payment initiation cannot yet be executed since a multilevel SCA is mandated. * The ASPSP has indicated with an ‘startAuthorisation’ hyperlink in the preceeding Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP. The ‘startAuthorisation’ hyperlink can transport more information about data which needs to be uploaded by using the extended forms as indicated above. * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for executing the cancellation. * The signing basket needs to be authorised yet."
											},
											"response": []
										},
										{
											"name": "3. Update PSU Data - psuData",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b3391c15-edc1-4d97-b687-a3c887f07685",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.response.to.have.status(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_none}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "One SCA method available",
									"item": [
										{
											"name": "1. Creates AIS consent",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6f709a09-78fc-40ce-8274-dc29bbcd560e",
														"exec": [
															"pm.globals.unset(\"consent_id\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "27c858ba-9ceb-426a-8e5d-438f019c0598",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Consent status is received\", () => {",
															"    pm.expect(jsonData.consentStatus).to.eql('received');",
															"});",
															"",
															"pm.globals.set(\"consent_id\", jsonData.consentId);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "date",
														"value": "Sun, 11 Aug 2019 15:02:37 GMT"
													},
													{
														"key": "tpp-qwac-certificate",
														"value": "qwac certificate"
													},
													{
														"key": "x-request-id",
														"value": "{{x_request_id}}"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "TPP-Explicit-Authorisation-Preferred",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n        \"iban\": \"DE80760700240271232400\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n        \"iban\": \"DE80760700240271232400\"\n      }\n    ],\n    \"transactions\": [\n      {\n       \"currency\": \"EUR\",\n        \"iban\": \"DE80760700240271232400\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": true,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2019-10-10\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents"
													]
												},
												"description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
											},
											"response": []
										},
										{
											"name": "2. Start the authorisation process for a consent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "898a97c1-12fd-4166-82b5-9a8f4fc1106c",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Sca status is started\", () => {",
															"    pm.expect(jsonData.scaStatus).to.eql('started');",
															"});",
															"",
															"// splits string link by '/' to array and gets the last element - authorisationId",
															"// e.g. \"http://localhost:8080/v1/consents/d917f39f-6308-4f81-9b51-bfbd8bc934c6/authorisations/554fda7d-bc70-44da-8670-15e299f817a6\"",
															"      // needs to get 554fda7d-bc70-44da-8670-15e299f817a6 value",
															"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.href.split('/').pop();",
															"",
															"pm.globals.set(\"authorisation_id\", authorisationId);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "befc2b29-5dab-4f51-b077-032638f06ac0",
														"exec": [
															"pm.globals.unset(\"authorisation_id\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process of a consent. The message might in addition transmit authentication and authorisation related data. his method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the consent. The ASPSP might make the usage of this access method unnecessary, since the related authorisation resource will be automatically created by the ASPSP after the submission of the consent data with the first POST consents call. The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource. This applies in the following scenarios: * The ASPSP has indicated with an ‘startAuthorisation’ hyperlink in the preceeding Payment Initiation Response that an explicit start of the authorisation process is needed by the TPP. The ‘startAuthorisation’ hyperlink can transport more information about data which needs to be uploaded by using the extended forms. * 'startAuthorisationWithPsuIdentfication’, * ‘startAuthorisationWithPsuAuthentication’ * ‘startAuthorisationWithAuthentciationMethodSelection’ * The related payment initiation cannot yet be executed since a multilevel SCA is mandated. * The ASPSP has indicated with an ‘startAuthorisation’ hyperlink in the preceeding Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP. The ‘startAuthorisation’ hyperlink can transport more information about data which needs to be uploaded by using the extended forms as indicated above. * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for executing the cancellation. * The signing basket needs to be authorised yet."
											},
											"response": []
										},
										{
											"name": "3. Update PSU Data - psuData",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d0c9c8a0-15b4-4538-8de2-0dc94cee4229",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Sca status is scaMethodSelected\", () => {",
															"    pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
															"});",
															"",
															"pm.test(\"Authorise transaction link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('authoriseTransaction');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "4. Update PSU Data - scaAuthenticationData",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5f68d970-5e06-439d-bd5d-cc15c75f527b",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Sca status is finalised\", () => {",
															"    pm.expect(jsonData.scaStatus).to.eql('finalised');",
															"});",
															"",
															"pm.test(\"Sca status link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"scaAuthenticationData\": \"{{tan}}\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c58164aa-84a7-4f4e-855e-72820551c4b7",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2dbe4afb-19b0-4ac3-a4ee-b26c43f7934a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Selection of a SCA method",
									"item": [
										{
											"name": "1. Creates AIS consent",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6f709a09-78fc-40ce-8274-dc29bbcd560e",
														"exec": [
															"pm.globals.unset(\"consent_id\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "27c858ba-9ceb-426a-8e5d-438f019c0598",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Consent status is received\", () => {",
															"    pm.expect(jsonData.consentStatus).to.eql('received');",
															"});",
															"",
															"pm.globals.set(\"consent_id\", jsonData.consentId);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "date",
														"value": "Sun, 11 Aug 2019 15:02:37 GMT"
													},
													{
														"key": "tpp-qwac-certificate",
														"value": "qwac certificate"
													},
													{
														"key": "x-request-id",
														"value": "{{x_request_id}}"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "TPP-Explicit-Authorisation-Preferred",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n        \"iban\": \"DE38760700240320465700\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n        \"iban\": \"DE38760700240320465700\"\n      }\n    ],\n    \"transactions\": [\n      {\n       \"currency\": \"EUR\",\n        \"iban\": \"DE38760700240320465700\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": true,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2019-10-10\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents"
													]
												},
												"description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
											},
											"response": []
										},
										{
											"name": "2. Start the authorisation process for a consent",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "898a97c1-12fd-4166-82b5-9a8f4fc1106c",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Sca status is started\", () => {",
															"    pm.expect(jsonData.scaStatus).to.eql('started');",
															"});",
															"",
															"// splits string link by '/' to array and gets the last element - authorisationId",
															"// e.g. \"http://localhost:8080/v1/consents/d917f39f-6308-4f81-9b51-bfbd8bc934c6/authorisations/554fda7d-bc70-44da-8670-15e299f817a6\"",
															"      // needs to get 554fda7d-bc70-44da-8670-15e299f817a6 value",
															"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.href.split('/').pop();",
															"",
															"pm.globals.set(\"authorisation_id\", authorisationId);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "befc2b29-5dab-4f51-b077-032638f06ac0",
														"exec": [
															"pm.globals.unset(\"authorisation_id\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process of a consent. The message might in addition transmit authentication and authorisation related data. his method is iterated n times for a n times SCA authorisation in a corporate context, each creating an own authorisation sub-endpoint for the corresponding PSU authorising the consent. The ASPSP might make the usage of this access method unnecessary, since the related authorisation resource will be automatically created by the ASPSP after the submission of the consent data with the first POST consents call. The start authorisation process is a process which is needed for creating a new authorisation or cancellation sub-resource. This applies in the following scenarios: * The ASPSP has indicated with an ‘startAuthorisation’ hyperlink in the preceeding Payment Initiation Response that an explicit start of the authorisation process is needed by the TPP. The ‘startAuthorisation’ hyperlink can transport more information about data which needs to be uploaded by using the extended forms. * 'startAuthorisationWithPsuIdentfication’, * ‘startAuthorisationWithPsuAuthentication’ * ‘startAuthorisationWithAuthentciationMethodSelection’ * The related payment initiation cannot yet be executed since a multilevel SCA is mandated. * The ASPSP has indicated with an ‘startAuthorisation’ hyperlink in the preceeding Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP. The ‘startAuthorisation’ hyperlink can transport more information about data which needs to be uploaded by using the extended forms as indicated above. * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for executing the cancellation. * The signing basket needs to be authorised yet."
											},
											"response": []
										},
										{
											"name": "3. Update PSU Data - psuData",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a9ee083f-2b6d-42df-a671-49d5160d90ef",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"pm.globals.set(\"authentication_method_id\", jsonData.scaMethods[0].authenticationMethodId);",
															"",
															"pm.test(\"Sca status is psuAuthenticated\", () => {",
															"    pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
															"});",
															"",
															"pm.test(\"Select authentication method link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "4. Update PSU Data - authenticationMethodId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "42a2c2db-483b-47ec-a057-d735b04446e4",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Sca status is scaMethodSelected\", () => {",
															"    pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
															"});",
															"",
															"pm.test(\"Authorise transaction link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('authoriseTransaction');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"authenticationMethodId\": \"{{authentication_method_id}}\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "5. Update PSU Data - scaAuthenticationData",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "db69a5d6-30f3-49fe-ac95-20d2acf84b46",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Sca status is finalised\", () => {",
															"    pm.expect(jsonData.scaStatus).to.eql('finalised');",
															"});",
															"",
															"pm.test(\"Sca status link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"scaAuthenticationData\": \"{{tan}}\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "2 Implicit",
							"item": [
								{
									"name": "None SCA method available",
									"item": [
										{
											"name": "1. Creates AIS consent",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "67e3b59f-3cc0-4d01-9dd6-4d0a30089e74",
														"exec": [
															"pm.globals.unset(\"consent_id\");",
															"pm.globals.unset(\"authorisation_id\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e9a63648-bd33-44b6-8a9b-7b3f1dc5f2f7",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Consent status is received\", () => {",
															"    pm.expect(jsonData.consentStatus).to.eql('received');",
															"});",
															"",
															"pm.globals.set(\"consent_id\", jsonData.consentId);",
															"",
															"// splits string link by '/' to array and gets the last element - authorisationId",
															"// e.g. \"http://localhost:8080/v1/consents/d917f39f-6308-4f81-9b51-bfbd8bc934c6/authorisations/554fda7d-bc70-44da-8670-15e299f817a6\"",
															"      // needs to get 554fda7d-bc70-44da-8670-15e299f817a6 value",
															"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.href.split('/').pop();",
															"",
															"pm.globals.set(\"authorisation_id\", authorisationId);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "date",
														"value": "Sun, 11 Aug 2019 15:02:37 GMT"
													},
													{
														"key": "tpp-qwac-certificate",
														"value": "qwac certificate"
													},
													{
														"key": "x-request-id",
														"value": "{{x_request_id}}"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_none}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n        \"iban\": \"DE69760700240340283600\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n        \"iban\": \"DE69760700240340283600\"\n      }\n    ],\n    \"transactions\": [\n      {\n       \"currency\": \"EUR\",\n        \"iban\": \"DE69760700240340283600\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": true,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2019-10-10\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents"
													]
												},
												"description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
											},
											"response": []
										},
										{
											"name": "2. Update PSU Data - psuData",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b3391c15-edc1-4d97-b687-a3c887f07685",
														"exec": [
															"pm.test(\"Status code is 400\", () => {",
															"    pm.response.to.have.status(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_none}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "One SCA method available",
									"item": [
										{
											"name": "1. Creates AIS consent",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c01d8c8f-c04e-476b-a6f3-38ffdf6c7793",
														"exec": [
															"pm.globals.unset(\"consent_id\");",
															"pm.globals.unset(\"authorisation_id\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7f13e662-665c-4205-a8a5-5994c5787046",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Consent status is received\", () => {",
															"    pm.expect(jsonData.consentStatus).to.eql('received');",
															"});",
															"",
															"pm.globals.set(\"consent_id\", jsonData.consentId);",
															"",
															"// splits string link by '/' to array and gets the last element - authorisationId",
															"// e.g. \"http://localhost:8080/v1/consents/d917f39f-6308-4f81-9b51-bfbd8bc934c6/authorisations/554fda7d-bc70-44da-8670-15e299f817a6\"",
															"      // needs to get 554fda7d-bc70-44da-8670-15e299f817a6 value",
															"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.href.split('/').pop();",
															"",
															"pm.globals.set(\"authorisation_id\", authorisationId);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "date",
														"value": "Sun, 11 Aug 2019 15:02:37 GMT"
													},
													{
														"key": "tpp-qwac-certificate",
														"value": "qwac certificate"
													},
													{
														"key": "x-request-id",
														"value": "{{x_request_id}}"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n        \"iban\": \"DE80760700240271232400\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n        \"iban\": \"DE80760700240271232400\"\n      }\n    ],\n    \"transactions\": [\n      {\n       \"currency\": \"EUR\",\n        \"iban\": \"DE80760700240271232400\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": true,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2019-10-10\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents"
													]
												},
												"description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
											},
											"response": []
										},
										{
											"name": "2. Update PSU Data - psuData",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d0c9c8a0-15b4-4538-8de2-0dc94cee4229",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Sca status is scaMethodSelected\", () => {",
															"    pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
															"});",
															"",
															"pm.test(\"Authorise transaction link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('authoriseTransaction');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "3. Update PSU Data - scaAuthenticationData",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "98bc774d-ecb6-44b3-91c5-f08e2536ca65",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Sca status is finalised\", () => {",
															"    pm.expect(jsonData.scaStatus).to.eql('finalised');",
															"});",
															"",
															"pm.test(\"Sca status link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"scaAuthenticationData\": \"{{tan}}\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c58164aa-84a7-4f4e-855e-72820551c4b7",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2dbe4afb-19b0-4ac3-a4ee-b26c43f7934a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Selection of a SCA method",
									"item": [
										{
											"name": "1. Creates AIS consent",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f3033a25-b8ea-4a1f-b9ca-fc5de93372b1",
														"exec": [
															"pm.globals.unset(\"consent_id\");",
															"pm.globals.unset(\"authorisation_id\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e9410b68-d578-46d0-aab6-f179ca733b34",
														"exec": [
															"pm.test(\"Status code is 201\", () => {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Consent status is received\", () => {",
															"    pm.expect(jsonData.consentStatus).to.eql('received');",
															"});",
															"",
															"pm.globals.set(\"consent_id\", jsonData.consentId);",
															"",
															"// splits string link by '/' to array and gets the last element - authorisationId",
															"// e.g. \"http://localhost:8080/v1/consents/d917f39f-6308-4f81-9b51-bfbd8bc934c6/authorisations/554fda7d-bc70-44da-8670-15e299f817a6\"",
															"      // needs to get 554fda7d-bc70-44da-8670-15e299f817a6 value",
															"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.href.split('/').pop();",
															"",
															"pm.globals.set(\"authorisation_id\", authorisationId);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "date",
														"value": "Sun, 11 Aug 2019 15:02:37 GMT"
													},
													{
														"key": "tpp-qwac-certificate",
														"value": "qwac certificate"
													},
													{
														"key": "x-request-id",
														"value": "{{x_request_id}}"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n        \"iban\": \"DE38760700240320465700\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n        \"iban\": \"DE38760700240320465700\"\n      }\n    ],\n    \"transactions\": [\n      {\n       \"currency\": \"EUR\",\n        \"iban\": \"DE38760700240320465700\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": true,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2019-10-10\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents"
													]
												},
												"description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
											},
											"response": []
										},
										{
											"name": "2. Update PSU Data - psuData",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a9ee083f-2b6d-42df-a671-49d5160d90ef",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Sca status is psuAuthenticated\", () => {",
															"    pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
															"});",
															"",
															"pm.test(\"Select authentication method link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
															"});",
															"",
															"pm.test(\"Expect to have 2 authenticationMethods\", () =>{",
															"    pm.expect(jsonData.scaMethods[0]).to.have.property('authenticationMethodId');",
															"    pm.globals.set(\"authentication_method_id\", jsonData.scaMethods[0].authenticationMethodId);",
															"    ",
															"    pm.expect(jsonData.scaMethods[1]).to.have.property('authenticationMethodId');",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "3. Update PSU Data - authenticationMethodId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "42a2c2db-483b-47ec-a057-d735b04446e4",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Sca status is scaMethodSelected\", () => {",
															"    pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
															"});",
															"",
															"pm.test(\"Authorise transaction link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('authoriseTransaction');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"authenticationMethodId\": \"{{authentication_method_id}}\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "4. Update PSU Data - scaAuthenticationData",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "db69a5d6-30f3-49fe-ac95-20d2acf84b46",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Sca status is finalised\", () => {",
															"    pm.expect(jsonData.scaStatus).to.eql('finalised');",
															"});",
															"",
															"pm.test(\"Sca status link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"scaAuthenticationData\": \"{{tan}}\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"consents",
														"{{consent_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "3 One SCA method available Global consent",
							"item": [
								{
									"name": "1. Creates AIS consent",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c01d8c8f-c04e-476b-a6f3-38ffdf6c7793",
												"exec": [
													"pm.globals.unset(\"consent_id\");",
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7f13e662-665c-4205-a8a5-5994c5787046",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent status is received\", () => {",
													"    pm.expect(jsonData.consentStatus).to.eql('received');",
													"});",
													"",
													"pm.globals.set(\"consent_id\", jsonData.consentId);",
													"",
													"// splits string link by '/' to array and gets the last element - authorisationId",
													"// e.g. \"http://localhost:8080/v1/consents/d917f39f-6308-4f81-9b51-bfbd8bc934c6/authorisations/554fda7d-bc70-44da-8670-15e299f817a6\"",
													"      // needs to get 554fda7d-bc70-44da-8670-15e299f817a6 value",
													"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.href.split('/').pop();",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "date",
												"value": "Sun, 11 Aug 2019 15:02:37 GMT"
											},
											{
												"key": "tpp-qwac-certificate",
												"value": "qwac certificate"
											},
											{
												"key": "x-request-id",
												"value": "{{x_request_id}}"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"allPsd2\": \"allAccounts\",\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": true,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2019-10-10\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents"
											]
										},
										"description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
									},
									"response": []
								},
								{
									"name": "2. Update PSU Data - psuData",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d0c9c8a0-15b4-4538-8de2-0dc94cee4229",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Sca status is scaMethodSelected\", () => {",
													"    pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
													"});",
													"",
													"pm.test(\"Authorise transaction link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('authoriseTransaction');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "3. Update PSU Data - scaAuthenticationData",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98bc774d-ecb6-44b3-91c5-f08e2536ca65",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Sca status is finalised\", () => {",
													"    pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Sca status link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scaAuthenticationData\": \"{{tan}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c58164aa-84a7-4f4e-855e-72820551c4b7",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2dbe4afb-19b0-4ac3-a4ee-b26c43f7934a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "4 One SCA method available Bank offered consent",
							"item": [
								{
									"name": "1. Creates AIS consent",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c01d8c8f-c04e-476b-a6f3-38ffdf6c7793",
												"exec": [
													"pm.globals.unset(\"consent_id\");",
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7f13e662-665c-4205-a8a5-5994c5787046",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent status is received\", () => {",
													"    pm.expect(jsonData.consentStatus).to.eql('received');",
													"});",
													"",
													"pm.globals.set(\"consent_id\", jsonData.consentId);",
													"",
													"// splits string link by '/' to array and gets the last element - authorisationId",
													"// e.g. \"http://localhost:8080/v1/consents/d917f39f-6308-4f81-9b51-bfbd8bc934c6/authorisations/554fda7d-bc70-44da-8670-15e299f817a6\"",
													"      // needs to get 554fda7d-bc70-44da-8670-15e299f817a6 value",
													"const authorisationId = jsonData._links.scaStatus.href.split('/').pop();",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "x-request-id",
												"value": "{{x_request_id}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "TPP-REDIRECT-PREFERRED",
												"value": "true",
												"type": "text"
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "{{tpp-redirect-uri}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": true,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2019-10-10\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents"
											]
										},
										"description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
									},
									"response": []
								},
								{
									"name": "2 Start the authorisation process for a consent bank offered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1957eb90-4bd3-4751-9256-ba7e705265d9",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.href.split('/').pop();",
													"",
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Start authorisation link exists\", () => {",
													"    pm.expect(jsonData).to.have.",
													"    property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('started');",
													"});",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9a3b9e5d-5391-4c0e-b91c-beab5542e7e3",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID",
												"value": "{{PSU-Corporate-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID-Type",
												"value": "{{PSU-Corporate-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "PSU-ID-Type",
												"value": "{{PSU-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "3. Update PSU Data - psuData",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d0c9c8a0-15b4-4538-8de2-0dc94cee4229",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Sca status is scaMethodSelected\", () => {",
													"    pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
													"});",
													"",
													"pm.test(\"Authorise transaction link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('authoriseTransaction');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "4. Update PSU Data - scaAuthenticationData",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98bc774d-ecb6-44b3-91c5-f08e2536ca65",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Sca status is finalised\", () => {",
													"    pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Sca status link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scaAuthenticationData\": \"{{tan}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c58164aa-84a7-4f4e-855e-72820551c4b7",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2dbe4afb-19b0-4ac3-a4ee-b26c43f7934a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "5 One SCA method available Consent on Account list",
							"item": [
								{
									"name": "1. Creates AIS consent",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c01d8c8f-c04e-476b-a6f3-38ffdf6c7793",
												"exec": [
													"pm.globals.unset(\"consent_id\");",
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7f13e662-665c-4205-a8a5-5994c5787046",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent status is received\", () => {",
													"    pm.expect(jsonData.consentStatus).to.eql('received');",
													"});",
													"",
													"pm.globals.set(\"consent_id\", jsonData.consentId);",
													"",
													"// splits string link by '/' to array and gets the last element - authorisationId",
													"// e.g. \"http://localhost:8080/v1/consents/d917f39f-6308-4f81-9b51-bfbd8bc934c6/authorisations/554fda7d-bc70-44da-8670-15e299f817a6\"",
													"      // needs to get 554fda7d-bc70-44da-8670-15e299f817a6 value",
													"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.href.split('/').pop();",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "date",
												"value": "Sun, 11 Aug 2019 15:02:37 GMT"
											},
											{
												"key": "tpp-qwac-certificate",
												"value": "qwac certificate"
											},
											{
												"key": "x-request-id",
												"value": "{{x_request_id}}"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"availableAccounts\": \"allAccounts\",\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": true,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2019-10-10\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents"
											]
										},
										"description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
									},
									"response": []
								},
								{
									"name": "2. Update PSU Data - psuData",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d0c9c8a0-15b4-4538-8de2-0dc94cee4229",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Sca status is scaMethodSelected\", () => {",
													"    pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
													"});",
													"",
													"pm.test(\"Authorise transaction link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('authoriseTransaction');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "3. Update PSU Data - scaAuthenticationData",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98bc774d-ecb6-44b3-91c5-f08e2536ca65",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Sca status is finalised\", () => {",
													"    pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Sca status link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scaAuthenticationData\": \"{{tan}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c58164aa-84a7-4f4e-855e-72820551c4b7",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2dbe4afb-19b0-4ac3-a4ee-b26c43f7934a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "AIS Functionality",
					"item": [
						{
							"name": "1 Read account dedicated consent 1sca embedded",
							"item": [
								{
									"name": "1 create consent dedicated",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d82067d6-38d6-47c1-afc8-d96a9652ed62",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent Id exists\", () => {",
													"   pm.expect(jsonData).to.have.property('consentId');",
													"});",
													"",
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Start authorisation link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    var expl = _links.startAuthorisationWithPsuAuthentication;",
													"    var impl = _links.startAuthorisation;",
													"  ",
													"    if (expl === undefined && impl === undefined) {",
													"       pm.expect().fail();",
													"    }",
													"});",
													"",
													"pm.test(\"Consent status is received\", () => {",
													"    pm.expect(jsonData.consentStatus).to.eql('received');",
													"});",
													"",
													"pm.globals.set(\"consent_id\", jsonData.consentId);",
													"pm.globals.set(\"startAuthorisation\", jsonData._links.startAuthorisation);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8f6f0540-140c-4038-988d-e242ef45eb59",
												"exec": [
													"pm.globals.unset(\"consent_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n        \"iban\": \"DE80760700240271232400\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n        \"iban\": \"DE80760700240271232400\"\n      }\n    ],\n    \"transactions\": [\n     {\n        \"currency\": \"EUR\",\n        \"iban\": \"DE80760700240271232400\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": true,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2019-10-10\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents"
											]
										}
									},
									"response": []
								},
								{
									"name": "2 Start the authorisation process for a consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d27d8ddc-62a0-4ec5-9a7b-6f17fe907821",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.href.split('/').pop();",
													"",
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Start authorisation link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('started');",
													"});",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3e6dad57-6160-4fdc-a0ea-786c9ba85e06",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID",
												"value": "{{PSU-Corporate-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID-Type",
												"value": "{{PSU-Corporate-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "PSU-ID-Type",
												"value": "{{PSU-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "3 Update PSU Data for consents",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3bbec509-c1ad-45ae-b7c2-f62787e3399c",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is scaMethodSelected', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
													"});",
													"",
													"pm.test(\"Select authoriseTransaction method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('authoriseTransaction');",
													"});",
													"",
													"pm.test(\"Select chosenScaMethod exist\", () => {",
													"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
													"    const chosenScaMethod = jsonData.chosenScaMethod;",
													"    ",
													"    /*pm.expect(chosenScaMethod).to.have.property('authenticationType');",
													"    pm.expect(chosenScaMethod.authenticationType).to.eql('SMS_OTP');*/",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
													"    //pm.expect(chosenScaMethod.authenticationMethodId).to.eql(pm.globals.get(\"authentication_method_id\"));",
													"});",
													"",
													"pm.test(\"Challenge data exist\", () => {",
													"    pm.expect(jsonData).to.have.property('challengeData');",
													"   /* const challengeData = jsonData.challengeData;",
													"    ",
													"    pm.expect(challengeData).to.have.property('data');",
													"    pm.expect(challengeData).to.have.property('imageLink');",
													"    pm.expect(challengeData).to.have.property('otpMaxLength');",
													"    pm.expect(challengeData).to.have.property('additionalInformation');*/",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID",
												"value": "{{PSU-Corporate-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID-Type",
												"value": "{{PSU-Corporate-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "PSU-ID-Type",
												"value": "{{PSU-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "4 Update PSU Data for consents finalization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e30b6d6-16d6-4b78-a782-0c9caef3ea1a",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Select scaStatus link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID",
												"value": "{{PSU-Corporate-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID-Type",
												"value": "{{PSU-Corporate-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "PSU-ID-Type",
												"value": "{{PSU-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scaAuthenticationData\": \"{{tan}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "5 Read Account List",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88ba13c7-91e5-4e67-8f76-4a26f9455267",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.globals.set(\"account_id\", jsonData.accounts[0].resourceId);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Data exists\", () => {",
													"    if (jsonData.accounts.length > 0) {",
													"        const firstAccount = jsonData.accounts[0];",
													"        ",
													"        pm.expect(firstAccount).to.have.property('_links');",
													"        pm.expect(firstAccount._links).to.have.property('balances');",
													"        pm.expect(firstAccount._links).to.have.property('transactions');",
													"        pm.expect(firstAccount).to.have.property('resourceId');",
													"        ",
													"        if (pm.globals.get(\"with_balance\") === \"true\") {",
													"            pm.expect(firstAccount).to.have.property('balances');",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6e2e680d-94a5-4d06-9a7d-3f7d9b3ad8db",
												"exec": [
													"pm.globals.unset(\"account_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Consent-ID",
												"value": "{{consent_id}}"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts?withBalance={{with_balance}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"accounts"
											],
											"query": [
												{
													"key": "withBalance",
													"value": "{{with_balance}}"
												}
											]
										},
										"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
									},
									"response": []
								},
								{
									"name": "6 Read Account Details",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b8d1c97-da4a-417e-a512-fb62573a1f66",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.globals.set(\"account_id\", jsonData.resourceId);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Data exists\", () => {",
													"    if (!(jsonData === null || jsonData.length === 0)) {",
													"        pm.expect(jsonData).to.have.property('_links');",
													"        pm.expect(jsonData._links).to.have.property('balances');",
													"        pm.expect(jsonData._links).to.have.property('transactions');",
													"        pm.expect(jsonData).to.have.property('resourceId');",
													"        ",
													"        if (pm.globals.get(\"with_balance\") === \"true\") {",
													"            pm.expect(jsonData).to.have.property('balances');",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Consent-ID",
												"value": "{{consent_id}}"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{account_id}}?withBalance={{with_balance}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{account_id}}"
											],
											"query": [
												{
													"key": "withBalance",
													"value": "{{with_balance}}"
												}
											]
										},
										"description": "Reads details about an account, with balances where required.  It is assumed that a consent of the PSU to  this access is already given and stored on the ASPSP system.  The addressed details of this account depends then on the stored consent addressed by consentId,  respectively the OAuth2 access token.  **NOTE:** The account-id can represent a multicurrency account.  In this case the currency code is set to \"XXX\".  Give detailed information about the addressed account.  Give detailed information about the addressed account together with balance information "
									},
									"response": []
								},
								{
									"name": "7 Read Balance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa7bf837-9bf3-46c2-9e9e-57f3f5d17d73",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Data exists\", () => {",
													"    if (!(jsonData === null || jsonData.length === 0)) {",
													"        pm.expect(jsonData).to.have.property('account');",
													"        ",
													"        if (pm.globals.get(\"with_balance\") === \"true\") {",
													"            pm.expect(jsonData).to.have.property('balances');",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Consent-ID",
												"value": "{{consent_id}}"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{account_id}}/balances",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{account_id}}",
												"balances"
											]
										},
										"description": "Reads account data from a given account addressed by \"account-id\".   **Remark:** This account-id can be a tokenised identification due to data protection reason since the path  information might be logged on intermediary servers within the ASPSP sphere.  This account-id then can be retrieved by the \"GET Account List\" call.  The account-id is constant at least throughout the lifecycle of a given consent. "
									},
									"response": []
								},
								{
									"name": "8 Read Transaction List",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "985b137b-f19c-4855-9b95-6223c94f5134",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.globals.set(\"resource_id\", jsonData.transactions.booked[0].transactionId);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Data exists\", () => {",
													"    if (!(jsonData === null || jsonData.length === 0)) {",
													"        pm.expect(jsonData).to.have.property('account');",
													"        ",
													"        if (jsonData.transactions !== undefined) {",
													"            const bookingStatus = pm.globals.get(\"booking_status\");",
													"            ",
													"            if (bookingStatus === 'booked') {",
													"                if (jsonData.transactions.pending !== undefined) {",
													"                    pm.expect().fail();",
													"                } ",
													"            }",
													"            ",
													"            if (bookingStatus === 'pending') {",
													"                if (jsonData.transactions.booked !== undefined) {",
													"                    pm.expect().fail();",
													"                } ",
													"            }",
													"        }",
													"        ",
													"        if (pm.globals.get(\"with_balance\") === \"true\") {",
													"            pm.expect(jsonData).to.have.property('balances');",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9f33f550-7718-40a7-baca-d060e7b6e992",
												"exec": [
													"pm.globals.unset(\"resource_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Consent-ID",
												"value": "{{consent_id}}"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{account_id}}/transactions?bookingStatus={{booking_status}}&dateFrom=2018-01-01&dateTo=&withBalance={{with_balance}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{account_id}}",
												"transactions"
											],
											"query": [
												{
													"key": "bookingStatus",
													"value": "{{booking_status}}"
												},
												{
													"key": "dateFrom",
													"value": "2018-01-01"
												},
												{
													"key": "dateTo",
													"value": ""
												},
												{
													"key": "withBalance",
													"value": "{{with_balance}}"
												}
											]
										},
										"description": "Read transaction reports or transaction lists of a given account adressed by \"account-id\", depending on the steering parameter  \"bookingStatus\" together with balances.  For a given account, additional parameters are e.g. the attributes \"dateFrom\" and \"dateTo\".  The ASPSP might add balance information, if transaction lists without balances are not supported. "
									},
									"response": []
								},
								{
									"name": "9 Read Transaction Details",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2de9cd45-47a3-44af-a835-e7c3e34a5d9c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"/*pm.test(\"Links exists\", () => {",
													"    if (!(jsonData === null || jsonData.length === 0)) {",
													"        pm.expect(jsonData).to.have.property('_links');",
													"        pm.expect(jsonData._links).to.have.property('balances');",
													"    }",
													"});*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Consent-ID",
												"value": "{{consent_id}}"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{account_id}}/transactions/{{resource_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"accounts",
												"{{account_id}}",
												"transactions",
												"{{resource_id}}"
											]
										},
										"description": "Reads transaction details from a given transaction addressed by \"resourceId\" on a given account addressed by \"account-id\".  This call is only available on transactions as reported in a JSON format.  **Remark:** Please note that the PATH might be already given in detail by the corresponding entry of the response of the  \"Read Transaction List\" call within the _links subfield. "
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "4 Payment Cancellation",
			"item": [
				{
					"name": "Embedded",
					"item": [
						{
							"name": "1 None Payment Status RCVD",
							"item": [
								{
									"name": "1. Payment initiation request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96d686a3-5f56-4cd2-b043-50dc3bf36d7c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Transcation status is RCVD\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
													"});",
													"",
													"pm.test(\"Start authorisation link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    var expl = _links.startAuthorisationWithPsuAuthentication;",
													"    var impl = _links.startAuthorisation;",
													"  ",
													"    if (expl === undefined && impl === undefined) {",
													"       pm.expect().fail();",
													"    }",
													"});",
													"",
													"pm.test(\"Select other links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"});",
													"",
													"pm.test(\"Payment Id exists\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"});",
													"",
													"pm.test(\"Transaction Fee Indicator exists\", () => {",
													"    pm.expect(jsonData).to.have.property('transactionFeeIndicator');",
													"});",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													"pm.globals.set(\"startAuthorisation\", jsonData._links.startAuthorisation);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b4cbc456-5fd9-4fd5-a8cc-c601b228c824",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"DE69760700240340283600\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"20.00\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"DE15500105172295759744\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"city\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postalCode\": \"90543\",\n      \"street\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}"
											]
										},
										"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
									},
									"response": []
								},
								{
									"name": "2. Initiate payment cancellation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b891d5cb-5fba-410f-9793-cc40df8bb179",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Transaction Status exists\", () => {",
													"    pm.expect(jsonData).to.have.property('transactionStatus', 'CANC');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/payments/{{payment_product}}/{{payment_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"payments",
												"{{payment_product}}",
												"{{payment_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Payment initiation status request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44164aa7-9d6b-4d33-8082-657e52e264b9",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Transaction Status exists\", () => {",
													"    pm.expect(jsonData).to.have.property('transactionStatus', 'CANC');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/xml"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"status"
											]
										},
										"description": "Check the transaction status of a payment initiation."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "2 None Payment Status ACSP",
							"item": [
								{
									"name": "1. Payment initiation request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96d686a3-5f56-4cd2-b043-50dc3bf36d7c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Transcation status is RCVD\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
													"});",
													"",
													"pm.test(\"Start authorisation link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    var expl = _links.startAuthorisationWithPsuAuthentication;",
													"    var impl = _links.startAuthorisation;",
													"  ",
													"    if (expl === undefined && impl === undefined) {",
													"       pm.expect().fail();",
													"    }",
													"});",
													"",
													"pm.test(\"Select other links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"});",
													"",
													"pm.test(\"Payment Id exists\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"});",
													"",
													"pm.test(\"Transaction Fee Indicator exists\", () => {",
													"    pm.expect(jsonData).to.have.property('transactionFeeIndicator');",
													"});",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													"pm.globals.set(\"startAuthorisation\", jsonData._links.startAuthorisation);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b4cbc456-5fd9-4fd5-a8cc-c601b228c824",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"DE69760700240340283600\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"20.00\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"DE15500105172295759744\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"city\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postalCode\": \"90543\",\n      \"street\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}"
											]
										},
										"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
									},
									"response": []
								},
								{
									"name": "2 Start the authorisation process for a payment initiation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9b76bd79-643e-4dac-9c0d-60dab7120135",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "83f45a10-10ef-4c2b-b9f1-3e29d0ae53fa",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.href.split('/').pop();",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('started');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID",
												"value": "{{PSU-Corporate-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID-Type",
												"value": "{{PSU-Corporate-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "PSU-ID-Type",
												"value": "{{PSU-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "4 Update PSU data for payment initiation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8ee040e-1fd9-415f-9d19-bad3df14d8a4",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Select scaStatus link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});",
													"",
													"pm.test(\"Select other links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID",
												"value": "{{PSU-Corporate-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID-Type",
												"value": "{{PSU-Corporate-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "PSU-ID-Type",
												"value": "{{PSU-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "2. Initiate payment cancellation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b891d5cb-5fba-410f-9793-cc40df8bb179",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Transaction Status exists\", () => {",
													"    pm.expect(jsonData).to.have.property('transactionStatus', 'ACSP');",
													"});",
													"",
													"pm.test(\"Start authorisation link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    var expl = _links.startAuthorisationWithPsuAuthentication;",
													"    var impl = _links.startAuthorisation;",
													"  ",
													"    if (expl === undefined && impl === undefined) {",
													"       pm.expect().fail();",
													"    }",
													"});",
													"",
													"pm.test(\"Select other links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/payments/{{payment_product}}/{{payment_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"payments",
												"{{payment_product}}",
												"{{payment_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Start cancellation authorisation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e454a71-e2cb-4276-8ffa-3afbf0638728",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.href.split('/').pop();",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('started');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/payments/{{payment_product}}/{{payment_id}}/cancellation-authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"payments",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Update PSU Data for cancellation (password stage)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "548b34dc-4d7d-4eae-9857-6c7a289bbecc",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Select scaStatus link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});",
													"",
													"pm.test(\"Select other links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/payments/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"payments",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Payment initiation status request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44164aa7-9d6b-4d33-8082-657e52e264b9",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Transaction Status exists\", () => {",
													"    pm.expect(jsonData).to.have.property('transactionStatus', 'CANC');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/xml"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"status"
											]
										},
										"description": "Check the transaction status of a payment initiation."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "3 One",
							"item": [
								{
									"name": "1. Payment initiation request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96d686a3-5f56-4cd2-b043-50dc3bf36d7c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Transcation status is RCVD\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
													"});",
													"",
													"pm.test(\"Start authorisation link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    var expl = _links.startAuthorisationWithPsuAuthentication;",
													"    var impl = _links.startAuthorisation;",
													"  ",
													"    if (expl === undefined && impl === undefined) {",
													"       pm.expect().fail();",
													"    }",
													"});",
													"",
													"pm.test(\"Select other links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});",
													"",
													"pm.test(\"Payment Id exists\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"});",
													"",
													"pm.test(\"Transaction Fee Indicator exists\", () => {",
													"    pm.expect(jsonData).to.have.property('transactionFeeIndicator');",
													"});",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													"pm.globals.set(\"startAuthorisation\", jsonData._links.startAuthorisation);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b4cbc456-5fd9-4fd5-a8cc-c601b228c824",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"DE80760700240271232400\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"1.00\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"DE15500105172295759744\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"city\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postalCode\": \"90543\",\n      \"street\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/payments/sepa-credit-transfers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"payments",
												"sepa-credit-transfers"
											]
										},
										"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
									},
									"response": []
								},
								{
									"name": "2 Start the authorisation process for a payment initiation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9b76bd79-643e-4dac-9c0d-60dab7120135",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "83f45a10-10ef-4c2b-b9f1-3e29d0ae53fa",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.href.split('/').pop();",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('started');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID",
												"value": "{{PSU-Corporate-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID-Type",
												"value": "{{PSU-Corporate-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "PSU-ID-Type",
												"value": "{{PSU-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "3 Update PSU data for payment initiation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8ee040e-1fd9-415f-9d19-bad3df14d8a4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is scaMethodSelected', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
													"});",
													"",
													"pm.test(\"Select authoriseTransaction method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('authoriseTransaction');",
													"});",
													"",
													"pm.test(\"Select other links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"});",
													"",
													"pm.test(\"Select chosenScaMethod exist\", () => {",
													"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
													"    const chosenScaMethod = jsonData.chosenScaMethod;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
													"   ",
													"    pm.expect(chosenScaMethod).to.have.property('name');",
													"});",
													"",
													"pm.test(\"Challenge data exist\", () => {",
													"    pm.expect(jsonData).to.have.property('challengeData');",
													"    /*const challengeData = jsonData.challengeData;",
													"    ",
													"    pm.expect(challengeData).to.have.property('data');",
													"    pm.expect(challengeData).to.have.property('imageLink');",
													"    pm.expect(challengeData).to.have.property('otpMaxLength');",
													"    pm.expect(challengeData).to.have.property('additionalInformation');*/",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID",
												"value": "{{PSU-Corporate-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID-Type",
												"value": "{{PSU-Corporate-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "PSU-ID-Type",
												"value": "{{PSU-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "4. Initiate payment cancellation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56e8cdd1-748b-4146-adc7-20fff4f56a4f",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Transaction Status exists\", () => {",
													"    pm.expect(jsonData).to.have.property('transactionStatus', 'ACCP');",
													"});",
													"",
													"pm.test(\"Start authorisation link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    var expl = _links.startAuthorisationWithPsuAuthentication;",
													"    var impl = _links.startAuthorisation;",
													"  ",
													"    if (expl === undefined && impl === undefined) {",
													"       pm.expect().fail();",
													"    }",
													"});",
													"",
													"pm.test(\"Select other links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/payments/{{payment_product}}/{{payment_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"payments",
												"{{payment_product}}",
												"{{payment_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Start cancellation authorisation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e454a71-e2cb-4276-8ffa-3afbf0638728",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.href.split('/').pop();",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"Select scaStatus\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"started\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://localhost:8089/v1/payments/{{payment_product}}/{{payment_id}}/cancellation-authorisations",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8089",
											"path": [
												"v1",
												"payments",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Update PSU Data for cancellation (password stage)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bfd94c0e-3389-45ef-97cd-c4ffc7223ae7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is scaMethodSelected', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
													"});",
													"",
													"pm.test(\"Select authoriseTransaction method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('authoriseTransaction');",
													"});",
													"",
													"pm.test(\"Select other links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"});",
													"",
													"pm.test(\"Select chosenScaMethod exist\", () => {",
													"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
													"    const chosenScaMethod = jsonData.chosenScaMethod;",
													"    ",
													"    /*pm.expect(chosenScaMethod).to.have.property('authenticationType');",
													"    pm.expect(chosenScaMethod.authenticationType).to.eql('SMS_OTP');*/",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
													"    //pm.expect(chosenScaMethod.authenticationMethodId).to.eql('bKLq119_SJomg8FlC_Y4Gs');",
													"});",
													"",
													"pm.test(\"Challenge data exist\", () => {",
													"    pm.expect(jsonData).to.have.property('challengeData');",
													"    /*const challengeData = jsonData.challengeData;",
													"    ",
													"    pm.expect(challengeData).to.have.property('data');",
													"    pm.expect(challengeData).to.have.property('imageLink');",
													"    pm.expect(challengeData).to.have.property('otpMaxLength');",
													"    pm.expect(challengeData).to.have.property('additionalInformation');*/",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "http://localhost:8089/v1/payments/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8089",
											"path": [
												"v1",
												"payments",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Update PSU Data for cancellation (tan)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "09cd5e78-8a30-4b52-ae9d-144dee529dc5",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Select scaStatus link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});",
													"",
													"pm.test(\"Select other links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scaAuthenticationData\": \"{{tan}}\"\n}"
										},
										"url": {
											"raw": "http://localhost:8089/v1/payments/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8089",
											"path": [
												"v1",
												"payments",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8 Payment initiation status request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5130ce0a-c88d-42f8-ad5f-34e86e3f09aa",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Test transaction status\", () => {",
													"    pm.expect(jsonData).to.have.property('transactionStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/xml"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"status"
											]
										},
										"description": "Check the transaction status of a payment initiation."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "4 Multiple",
							"item": [
								{
									"name": "1. Payment initiation request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96d686a3-5f56-4cd2-b043-50dc3bf36d7c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Transcation status is RCVD\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
													"});",
													"",
													"pm.test(\"Start authorisation link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    var expl = _links.startAuthorisationWithPsuAuthentication;",
													"    var impl = _links.startAuthorisation;",
													"  ",
													"    if (expl === undefined && impl === undefined) {",
													"       pm.expect().fail();",
													"    }",
													"});",
													"",
													"pm.test(\"Select other links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});",
													"",
													"pm.test(\"Payment Id exists\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"});",
													"",
													"pm.test(\"Transaction Fee Indicator exists\", () => {",
													"    pm.expect(jsonData).to.have.property('transactionFeeIndicator');",
													"});",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													"pm.globals.set(\"startAuthorisation\", jsonData._links.startAuthorisation);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b4cbc456-5fd9-4fd5-a8cc-c601b228c824",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"DE38760700240320465700\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"20.00\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"DE15500105172295759744\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"city\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postalCode\": \"90543\",\n      \"street\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/payments/sepa-credit-transfers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"payments",
												"sepa-credit-transfers"
											]
										},
										"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
									},
									"response": []
								},
								{
									"name": "2 Start the authorisation process for a payment initiation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9b76bd79-643e-4dac-9c0d-60dab7120135",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "83f45a10-10ef-4c2b-b9f1-3e29d0ae53fa",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.href.split('/').pop();",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('started');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID",
												"value": "{{PSU-Corporate-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID-Type",
												"value": "{{PSU-Corporate-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "PSU-ID-Type",
												"value": "{{PSU-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "3 Update PSU data for payment initiation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8ee040e-1fd9-415f-9d19-bad3df14d8a4",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is psuAuthenticated', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
													"});",
													"",
													"pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
													"});",
													"",
													"pm.test(\"scaMethods exist\", () => {",
													"    pm.expect(jsonData).to.have.property('scaMethods');",
													"    const scaMethods = jsonData.scaMethods;",
													"    ",
													"    pm.expect(scaMethods.length).to.eql(2);",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
													"    ",
													"    pm.expect(scaMethods[1]).to.have.property('authenticationMethodId');",
													"});",
													"",
													"pm.globals.set(\"authentication_method_id\", jsonData.scaMethods[0].authenticationMethodId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID",
												"value": "{{PSU-Corporate-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Corporate-ID-Type",
												"value": "{{PSU-Corporate-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "PSU-ID-Type",
												"value": "{{PSU-ID-Type}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "4. Cancel payment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fbdf7b5-d69d-458e-ad0f-b7d67134ab03",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Transaction Status exists\", () => {",
													"    pm.expect(jsonData).to.have.property('transactionStatus', 'ACCP');",
													"});",
													"",
													"pm.test(\"Start authorisation link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    var expl = _links.startAuthorisationWithPsuAuthentication;",
													"    var impl = _links.startAuthorisation;",
													"  ",
													"    if (expl === undefined && impl === undefined) {",
													"       pm.expect().fail();",
													"    }",
													"});",
													"",
													"pm.test(\"Select other links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/payments/{{payment_product}}/{{payment_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"payments",
												"{{payment_product}}",
												"{{payment_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Start cancellation authorisation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e454a71-e2cb-4276-8ffa-3afbf0638728",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.href.split('/').pop();",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('started');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/payments/{{payment_product}}/{{payment_id}}/cancellation-authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"payments",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Update PSU Data for cancellation (password stage)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2f55f61-07fe-471c-820c-c2c35ee6eda0",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is psuAuthenticated', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
													"});",
													"",
													"pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
													"});",
													"",
													"pm.test(\"scaMethods exist\", () => {",
													"    pm.expect(jsonData).to.have.property('scaMethods');",
													"    const scaMethods = jsonData.scaMethods;",
													"    ",
													"    pm.expect(scaMethods.length).to.eql(2);",
													"    ",
													"    /*pm.expect(scaMethods[0]).to.have.property('authenticationType');",
													"    pm.expect(scaMethods[0].authenticationType).to.eql('SMS_OTP');*/",
													"",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
													"    pm.globals.set(\"authentication_method_id\", scaMethods[0].authenticationMethodId)",
													"    //pm.expect(scaMethods[0].authenticationMethodId).to.eql('TCI_bX9rRQohgiba31INDw');",
													"    ",
													"    /*pm.expect(scaMethods[1]).to.have.property('authenticationType');",
													"    pm.expect(scaMethods[1].authenticationType).to.eql('PUSH_OTP');*/",
													"    ",
													"    pm.expect(scaMethods[1]).to.have.property('authenticationMethodId');",
													"    //pm.expect(scaMethods[1].authenticationMethodId).to.eql('push');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/payments/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"payments",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Update PSU Data for cancellation (sca method)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2c2e514-8b43-4415-9ff4-6d38fa39d6f2",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is scaMethodSelected', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
													"});",
													"",
													"pm.test(\"Select authoriseTransaction method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('authoriseTransaction');",
													"});",
													"",
													"pm.test(\"Select other links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"});",
													"",
													"pm.test(\"Select chosenScaMethod exist\", () => {",
													"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
													"    const chosenScaMethod = jsonData.chosenScaMethod;",
													"    ",
													"    /*pm.expect(chosenScaMethod).to.have.property('authenticationType');",
													"    pm.expect(chosenScaMethod.authenticationType).to.eql('SMS_OTP');*/",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
													"    pm.expect(chosenScaMethod.authenticationMethodId).to.eql(pm.globals.get(\"authentication_method_id\"));",
													"});",
													"",
													"pm.test(\"Challenge data exist\", () => {",
													"    pm.expect(jsonData).to.have.property('challengeData');",
													"   /* const challengeData = jsonData.challengeData;",
													"    ",
													"    pm.expect(challengeData).to.have.property('data');",
													"    pm.expect(challengeData).to.have.property('imageLink');",
													"    pm.expect(challengeData).to.have.property('otpMaxLength');",
													"    pm.expect(challengeData).to.have.property('additionalInformation');*/",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"authenticationMethodId\": \"{{authentication_method_id}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/payments/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"payments",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8. Update PSU Data for cancellation (tan)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "81df928f-81c5-41c2-8428-a1ccd9c5562b",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Select scaStatus link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});",
													"",
													"pm.test(\"Select other links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('self');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scaAuthenticationData\": \"{{tan}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/payments/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"payments",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Payment initiation status request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44164aa7-9d6b-4d33-8082-657e52e264b9",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Transaction Status exists\", () => {",
													"    pm.expect(jsonData).to.have.property('transactionStatus', 'CANC');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/xml"
											},
											{
												"key": "Digest",
												"value": "{{Digest}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept",
												"value": "{{PSU-Accept}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Charset",
												"value": "{{PSU-Accept-Charset}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Encoding",
												"value": "{{PSU-Accept-Encoding}}",
												"disabled": true
											},
											{
												"key": "PSU-Accept-Language",
												"value": "{{PSU-Accept-Language}}",
												"disabled": true
											},
											{
												"key": "PSU-Device-ID",
												"value": "{{PSU-Device-ID}}",
												"disabled": true
											},
											{
												"key": "PSU-Geo-Location",
												"value": "{{PSU-Geo-Location}}",
												"disabled": true
											},
											{
												"key": "PSU-Http-Method",
												"value": "{{PSU-Http-Method}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{PSU-IP-Address}}",
												"disabled": true
											},
											{
												"key": "PSU-IP-Port",
												"value": "{{PSU-IP-Port}}",
												"disabled": true
											},
											{
												"key": "PSU-User-Agent",
												"value": "{{PSU-User-Agent}}",
												"disabled": true
											},
											{
												"key": "Signature",
												"value": "{{Signature}}",
												"disabled": true
											},
											{
												"key": "TPP-Signature-Certificate",
												"value": "{{TPP-Signature-Certificate}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"status"
											]
										},
										"description": "Check the transaction status of a payment initiation."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "5 PIIS",
			"item": [
				{
					"name": "Local",
					"item": [
						{
							"name": "login at Ledgers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7ea774b-c570-4abc-a3aa-902eb2bd18f0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"pm.environment.set(\"token\", jsonData.bearerToken.access_token);",
											"pm.globals.set(\"psu_iban_none\", jsonData.bearerToken.accessTokenObject.account_accesses[0].iban)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/users/login?login={{psu_id_none}}&pin={{psu_id_password}}&role=CUSTOMER",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"users",
										"login"
									],
									"query": [
										{
											"key": "login",
											"value": "{{psu_id_none}}"
										},
										{
											"key": "pin",
											"value": "{{psu_id_password}}"
										},
										{
											"key": "role",
											"value": "CUSTOMER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "create PIIS Consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7db8ab8d-4915-4b32-a623-e56cef2dae4f",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"const jsonData = pm.response.json();",
											"pm.globals.set(\"piis_consent_id\", jsonData.consentId)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "psu-id",
										"value": "{{psu_id_none}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"accounts\": [\n    {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{psu_iban_none}}\"\n    }\n  ],\n  \"allowedFrequencyPerDay\": 4,\n  \n  \"validUntil\": \"2020-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/aspsp-api/v1/piis/consents/",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"aspsp-api",
										"v1",
										"piis",
										"consents",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create piis consent ledgers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25802938-5aa8-4e13-95e2-30f1ee93acb3",
										"exec": [
											"var CryptoJS = require(\"crypto-js\");",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"const string = pm.response.text();",
											"",
											"//Encrypt",
											"const encryptedWord = CryptoJS.enc.Utf8.parse(string);",
											"const encrypted = CryptoJS.enc.Base64.stringify(encryptedWord);",
											"pm.environment.set(\"token\", encrypted);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [\n      \"{{psu_iban_none}}\"\n    ],\n    \"allPsd2\": \"ALL_ACCOUNTS\",\n    \"availableAccounts\": \"ALL_ACCOUNTS\",\n    \"balances\": [\n      \"{{psu_iban_none}}\"\n    ],\n    \"transactions\": [\n      \"{{psu_iban_none}}\"\n    ]\n  },\n  \"frequencyPerDay\": 4,\n  \"recurringIndicator\": false,\n  \"tppId\": \"PSDDE-FAKENCA-87B2AC\",\n  \"userId\": \"{{psu_id_none}}\",\n  \"validUntil\": \"2020-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_ledgers}}/consents/piis",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_ledgers}}"
									],
									"path": [
										"consents",
										"piis"
									]
								}
							},
							"response": []
						},
						{
							"name": "update piis consent at cms",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"aspspConsentDataBase64\": \"{{token}}\",\n  \"consentId\": \"{{piis_consent_id}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{piis_consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"aspsp-consent-data",
										"consents",
										"{{piis_consent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund confirmation request(sufficient)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02b43079-3a6d-4e12-b69f-0a6d74a5c9b9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Funds are available\", () => {",
											"    pm.expect(jsonData).to.have.property('fundsAvailable'/*,true*/);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account\": {\n   \"currency\": \"EUR\",\n   \"iban\": \"DE69760700240340283600\"\n},\n  \"cardNumber\": \"12345\",\n  \"instructedAmount\": {\n    \"amount\": \"160.00\",\n    \"currency\": \"EUR\"\n  },\n  \"payee\": \"Check24\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/funds-confirmations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"funds-confirmations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund confirmation request failure - no consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff8da433-7a07-44be-8f3b-18b88ed71393",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Funds are available\", () => {",
											"    pm.expect(jsonData.tppMessages[0]).to.have.property('code', \"NO_PIIS_ACTIVATION\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account\": {\n   \"currency\": \"EUR\",\n   \"iban\": \"DE89370400440532013000\"\n},\n  \"cardNumber\": \"12345\",\n  \"instructedAmount\": {\n    \"amount\": \"1600.00\",\n    \"currency\": \"EUR\"\n  },\n  \"payee\": \"Check24\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/funds-confirmations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"funds-confirmations"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}